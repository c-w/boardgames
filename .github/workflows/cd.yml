name: CD

on:
  release:
    types:
      - published

jobs:
  deploy-client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Build client
        run: yarn run build-client
        env:
          REACT_APP_FRONTEND_ROOT: https://justamouse.com/boardgames
          REACT_APP_SERVER_URL: https://boardgames.justamouse.com

      - name: Deploy client
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/frontend

  deploy-server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        run: |
          if ! command -v terraform >/dev/null; then
            curl -fsSL "https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_linux_amd64.zip" -o /tmp/terraform.zip
            sudo unzip /tmp/terraform.zip terraform -d /usr/local/bin
            rm /tmp/terraform.zip
          fi
        env:
          terraform_version: '0.14.8'

      - name: Setup Ansible
        run: |
          if ! command -v ansible >/dev/null; then
            sudo apt-get update
            sudo apt-get install --yes software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install --yes ansible
          fi
          if ! command -v sshpass >/dev/null; then
            sudo apt-get update
            sudo apt-get install --yes sshpass
          fi

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      - name: Build server
        run: |
          set -e
          yarn run build-server
          yarn install --production --frozen-lockfile
          code_zip="$(find ./dist -type f -exec cat {} \; | md5sum | cut -d' ' -f1).zip"
          zip -qr "${code_zip}" ./package.json ./dist ./node_modules
          echo "code_zip=${code_zip}" >> "${GITHUB_ENV}"

      - name: Deploy server
        run: ./infrastructure/digitalocean/digitaloceandeploy.sh "${code_zip}"
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          DIGITALOCEAN_SSH_KEY_B64: ${{ secrets.DIGITALOCEAN_SSH_KEY_B64 }}
          LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
          TF_VAR_root_password: ${{ secrets.LINODE_VM_ROOT_PASSWORD }}
          TF_VAR_cloudflare_zone_id: '754c0447008df811847fb40a507054bc'
          FRONTEND_ROOT: https://justamouse.com
