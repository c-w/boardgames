$blue: #6AACDA;
$red: #E2001A;
$white: #FFFFFF;
$yellow: #FCDA00;
$green: #97BF0D;
$background: #FDECCE;
$black: #000000;
$brown: #8A5634;
$callout: #004481;

$cardWidth: 45px;
$cardHeight: 70px;
$cardOffsetXMax: 10px;
$cardOffsetXStep: 2px;
$cardOffsetYStep: 20px;
$cardNumMax: 12;
$numSuits: 5;
$cardBorder: 2px;
$brickWidth: 21;
$brickHeight: 22;
$fontSize: 15px;
$handSize: 8;
$gap: 10px;

@mixin callout {
  text-decoration: none;
  background-color: $callout;
  border: none;
  color: $white;
  padding: 8px 12px;
  border-radius: 4px;
  display: block;
  width: fit-content;
  margin: 8px auto;
  cursor: pointer;
}

@keyframes wobble {
  0%,
  10% {
    transform: rotateY(0turn);
  }

  50% {
    transform: rotateY(0.5turn) scale(0.65);
  }

  90%,
  100% {
    transform: rotateY(1turn);
  }
}

@keyframes ellipsis {
  to {
    width: 20px;
  }
}

.soaring-cities {
  background-color: $background;
  color: $black;
  display: table-cell;
  height: 100vh;
  width: 100vw;
  position: relative;
  font-size: $fontSize;
  font-family: Georgia, "Times New Roman", Times, serif;

  .loading {
    position: relative;
    width: 100%;
    height: 100%;

    &::before {
      content: '';
      width: 100%;
      height: 100%;
      display: block;
      background-size: 192px;
      background-image: url('./public/logo192.png');
      background-repeat: no-repeat;
      background-position: center;
      animation-name: wobble;
      animation-duration: 2s;
      animation-iteration-count: infinite;
      animation-direction: ease-in-out;
    }

    > span {
      position: absolute;
      top: calc(50% + 96px);
      left: calc(50% - 4ch);

      &::after {
        overflow: hidden;
        display: inline-block;
        vertical-align: bottom;
        animation-name: ellipsis;
        animation-timing-function: steps(4, end);
        animation-duration: 2s;
        animation-iteration-count: infinite;
        content: "…";
        width: 0px;
      }
    }
  }

  table {
    margin: $gap auto;
    border-collapse: collapse;
    border-radius: 4px;
    padding: 4px 16px;
    text-align: center;

    thead {
      color: $white;

      th {
        padding: 8px;
        font-weight: normal;
        font-size: smaller;
        background-color: $callout;
      }
    }

    tbody {
      td {
        padding: 8px;
        background-color: $white;
      }
    }

    thead > tr:first-of-type > th:first-of-type {
      border-top-left-radius: 4px;
    }

    thead > tr:first-of-type > th:last-of-type {
      border-top-right-radius: 4px;
    }

    tbody > tr:last-of-type > td:first-of-type {
      border-bottom-left-radius: 4px;
    }

    tbody > tr:last-of-type > td:last-of-type {
      border-bottom-right-radius: 4px;
    }
  }

  .help {
    position: fixed;
    z-index: 300;
    right: $gap;
    top: $gap;
    background-color: $white;
    border: 4px solid $callout;
    text-decoration: none;
    border-radius: 4px;
    height: 24px;
    width: 24px;
    line-height: 24px;
    display: flex;
    justify-content: center;
    align-items: center;

    span {
      display: none;
    }

    &::before {
      content: '️️🔧';
    }

    &:hover {
      border-color: $red;
    }
  }

  .rjsf {
    max-width: 400px;
    margin: 0 auto;

    fieldset {
      border: none;
    }

    .form-group {
      display: flex;
      justify-content: space-between;
      align-items: center;
      column-gap: $gap;
      margin-bottom: $gap;

      label {
        width: 50%;
      }

      input {
        width: 50%;
      }
    }

    label[for="root_playerName"]::before {
      content: '👷';
      margin-right: 2px;
    }

    .checkbox {
      width: 100%;

      label {
        width: 100%;
        display: flex;
        flex-direction: row-reverse;
        align-items: center;

        input {
          appearance: none;

          &::before {
            content: '❌';
          }

          &:checked::before {
            content: '✔️';
          }
        }

        span {
          width: 50%;

          &::before {
            content: '🚧';
            margin-right: 2px;
          }
        }
      }
    }

    input[type="submit"] {
      @include callout;
    }

    .required {
      display: none;
    }
  }

  .matches {
    max-width: 400px;
    margin: 0 auto;
    text-align: center;

    a {
      text-decoration: none;
      color: $black;

      &.create-game {
        @include callout;
      }
    }

    ul {
      list-style: none;
      text-align: left;
      padding: 0;
      margin: 16px 0 0 0;

      li {
        margin-bottom: 8px;

        a:hover {
          text-decoration: underline;
        }

        &::before {
          margin-left: -16px;
          margin-right: 8px;
        }

        &:nth-child(8n+1)::before {
          content: '🏢';
        }

        &:nth-child(8n+2)::before {
          content: '🚧';
        }

        &:nth-child(8n+3)::before {
          content: '🏨';
        }

        &:nth-child(8n+4)::before {
          content: '️🚛';
        }

        &:nth-child(8n+5)::before {
          content: '🏨';
        }

        &:nth-child(8n+6)::before {
          content: '👷';
        }

        &:nth-child(8n+7)::before {
          content: '🏪';
        }

        &:nth-child(8n+8)::before {
          content: '🦺';
        }
      }
    }
  }

  .rules {
    max-width: 400px;
    margin: 0 auto;
    padding: $gap;
    font-size: larger;

    h1,
    h2,
    blockquote {
      text-align: center;
    }

    blockquote {
      background-color: $white;
      padding: 8px 12px;
      border-radius: 4px;
    }

    ol {
      background-color: $white;
      border-radius: 4px;

      li {
        padding-top: 12px;
        padding-bottom: 12px;
      }
    }
  }

  .bgio-client {
    .waiting {
      opacity: 0.5;
      pointer-events: none;
    }

    ul, ol {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .gameover {
      text-align: center;

      a {
        @include callout;
      }
    }

    .drawpile,
    .discarded,
    .played {
      position: relative;

      .action {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 200;
        font-size: 0;
        background: none;
        border: none;
        outline: none;
        cursor: pointer;
      }
    }

    .drawpile {
      min-height: $cardHeight + $cardBorder;
      display: flex;
      align-items: center;

      .deck {
        display: block;
        position: relative;
        min-height: $cardHeight + $cardBorder;

        li {
          position: absolute;

          @for $i from 1 through $cardNumMax * $numSuits {
            &:nth-child(#{$i}) {
              z-index: $i;
              left: $cardBorder * $i;

              &::after {
                content: " #{$i} cards";
                text-align: center;
                position: absolute;
                font-size: smaller;
                top: $cardHeight / 2 - $fontSize;
                left: $cardBorder;
                display: none;
              }
            }
          }

          &:last-child::after {
            display: block;
          }

          @for $i from 1 through 5 {
            &:nth-child(10n + #{$i}) {
              top: $cardBorder * $i / 2;
            }

            &:nth-child(10n + #{$i + 5}) {
              top: $cardBorder * (5 - $i) / 2;
            }
          }
        }
      }
    }

    .played,
    .discarded,
    .hand {
      display: grid;
      grid-template-columns: 2 * $gap auto;
      grid-template-rows: auto;
      grid-template-areas: "description content";
      margin: $gap 0;

      label {
        cursor: pointer;

        &.disabled {
          cursor: not-allowed;
        }
      }

      > .description {
        grid-area: description;
        transform: rotate(180deg);
        writing-mode: vertical-lr;
        text-align: center;

        .points {
          margin-top: $gap;
        }
      }

      > .content {
        grid-area: content;
      }
    }

    .played {
      .suit {
        &.cards-0 {
          height: 0;
        }

        @for $i from 1 through $cardNumMax {
          &.cards-#{$i} {
            height: $cardHeight + ($i - 1) * $cardOffsetYStep;
          }
        }
      }

      > ul {
        > li {
          min-height: 100px;

          ol {
            position: relative;

            li {
              position: absolute;

              @for $i from 1 through $cardNumMax {
                &:nth-child(#{$i}) {
                  z-index: $i;
                  top: $cardOffsetYStep * ($i - 1);
                }
              }

              @for $i from 0 through 2 {
                &:nth-child(6n + #{$i * 2 + 1}) {
                  left: calc(50% - #{$cardWidth / 2 + $cardOffsetXStep * $i});
                }

                &:nth-child(6n + #{$i * 2}) {
                  left: calc(50% - #{$cardWidth / 2 + $cardOffsetXMax - ($cardOffsetXStep * $i)});
                }
              }
            }
          }
        }
      }
    }

    .discarded {
      > ul {
        background-image: url("data:image/svg+xml,%3Csvg width='#{$brickWidth}' height='#{$brickHeight}' viewBox='0 0 #{$brickWidth * 2} #{$brickHeight * 2}' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Cpath d='M0 0h42v44H0V0zm1 1h40v20H1V1zM0 23h20v20H0V23zm22 0h20v20H22V23z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        background-position: #{floor($brickWidth / 6)}px;
        background-color: $brown;

        > li {
          min-height: max($cardHeight + $cardBorder * 2, $cardWidth + $cardBorder * ($cardNumMax + 2));
          min-width: $cardHeight + $cardBorder * 2;
          position: relative;
          display: flex;
          align-items: center;

          > input {
            appearance: none;
          }

          > label {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 100;
            font-size: 0;
            top: 0;
            left: 0;
          }

          ol {
            position: relative;
            width: $cardHeight + 2 * $cardBorder;

            li {
              position: absolute;
              transform: rotate(-90deg);
              transform-origin: 0 0;
            }
          }

          @for $i from 0 through $cardNumMax {
            &.cards-#{$i} {
              ol {
                height: $cardWidth + ($i - 1) * $cardBorder;
              }
            }
          }

          @for $i from 1 through $cardNumMax {
            ol {
              li {
                &:nth-child(#{$i}) {
                  z-index: $i;
                  top: calc(100% - #{($i - 1) * $cardBorder});
                  left: $cardBorder;
                }
              }
            }
          }

          &.checked {
            ol {
              li {
                &:last-child {
                  transform: none;
                  top: calc(50% - #{$cardHeight / 2});
                  left: calc(50% - #{$cardWidth / 2});
                }

                &:not(:last-child) {
                  .card {
                    .rank {
                      display: none;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    .played,
    .discarded {
      > ul {
        display: flex;
        justify-content: space-between;

        > li {
          width: 20%;
        }
      }
    }

    .hand {
      min-height: $cardHeight + 2 * $gap;

      .content {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        row-gap: 2 * $gap;
      }

      .drawpile {
        min-width: $cardBorder * ($cardNumMax * $numSuits - 2 * $handSize + 1) + $cardWidth;
        height: $cardHeight + $cardBorder * 2
      }

      ul {
        display: flex;
        justify-content: center;
        align-items: center;
        column-gap: $gap / 2;
        row-gap: $gap;
        margin-right: $gap / 2;
        flex-wrap: wrap;

        &.cards-7::after {
          content: "";
          width: $cardWidth;
          height: $cardHeight;
          display: block;
        }

        li {
          &.checked {
            margin-top: -2 * $gap;
          }

          input {
            appearance: none;
          }

          label {
            display: inline-block;
          }
        }
      }
    }

    .card {
      height: $cardHeight;
      width: $cardWidth;
      border-radius: 4px;
      box-sizing: border-box;
      border: $cardBorder solid $black;
      padding: 1px 4px;
      display: block;
      user-select: none;

      &.background {
        background-color: $brown;

        .rank {
          display: none;
        }
      }

      &.blue {
        background-color: $blue;
      }

      &.red {
        background-color: $red;
      }

      &.white {
        background-color: $white;
      }

      &.yellow {
        background-color: $yellow;
      }

      &.green {
        background-color: $green;
      }
    }
  }
}
