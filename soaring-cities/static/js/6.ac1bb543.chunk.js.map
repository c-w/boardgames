{"version":3,"sources":["../node_modules/boardgame.io/dist/esm/core.js","shared/games/lc.js","frontend/boards/lc/index.js"],"names":["PlayerView","STRIP_SECRETS","G","ctx","playerID","r","undefined","secret","players","SUITS","BETS","RANKS","PLAYER_1","PLAYER_2","isBet","card","includes","rank","toOrdinal","indexOf","suit","scoreSuit","cards","length","partition","bets","true","ranks","false","numBets","sum","map","dealCards","deck","random","Shuffle","flatMap","hand1","hand2","i","push","pop","newCards","Object","fromEntries","hand","played","discarded","deckSize","findCardIndex","currentPlayer","findIndex","canPlayCardToBoard","previousCard","last","canPlayCardToDiscard","canDrawCardFromDeck","_ctx","canDrawCardFromDiscard","turn","game","name","minPlayers","maxPlayers","setup","scores","round","moves","playCardToBoard","move","INVALID_MOVE","splice","events","setStage","client","playCardToDiscard","onBegin","stages","drawCard","drawCardFromDeck","next","player","values","score","player1Score","player2Score","entries","key","value","onRoundEnd","endTurn","drawCardFromDiscard","endIf","winner","playerView","endStage","endPhase","endGame","setPhase","setActivePlayers","disableUndo","Points","points","sign","Math","abs","className","Played","caption","playCard","classNames","Deck","Discarded","onPickSuit","pickedSuit","disabled","discardCard","onChange","useCallback","event","target","id","checked","isMoveLegal","type","htmlFor","Card","Array","isArray","range","Hand","onPickCard","pickedCard","JSON","parse","sort","card1","card2","stringify","ScoreRow","role","aria-label","Board","matchData","useState","setPickedCard","setPickedSuit","useEffect","opponent","find","u","Number","otherPlayerID","toString","isActive","stage","activePlayers","gameover","numRounds","to","onClick","waiting"],"mappings":"iKAaMA,EAAa,CAQfC,cAAe,SAACC,EAAGC,EAAKC,GACpB,IAAIC,EAAI,eAAKH,GASb,YARiBI,IAAbD,EAAEE,eACKF,EAAEE,OAETF,EAAEG,UACFH,EAAEG,QAAF,eACKJ,EAAWC,EAAEG,QAAQJ,KAGvBC,K,ibCSTI,EAAQ,CAAC,SAAU,OAAQ,QAAS,QAAS,OAC7CC,EAAO,EAAE,GAAI,GAAI,GACjBC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAKjCC,EAAW,IACXC,EAAW,IAMV,SAASC,EAAMC,GACpB,OAAOL,EAAKM,SAASD,EAAKE,MAOrB,SAASC,EAAUH,GACxB,OAAwC,KAAhCN,EAAMU,QAAQJ,EAAKK,MAAQ,GAAWL,EAAKE,KA0E9C,SAASI,EAAUC,GACxB,GAAqB,IAAjBA,EAAMC,OACR,OAAO,EAFsB,MAKMC,YAAUF,GAAO,SAAAP,GAAI,OAAID,EAAMC,MAAtDU,EALiB,EAKvBC,KAAmBC,EALI,EAKXC,MAEdC,EAAUJ,EAAKF,OAIrB,OAHcO,YAAIH,EAAMI,KAAI,SAAAhB,GAAI,OAAIA,EAAKE,SAGzB,KAAOY,EAAU,IAFnBP,EAAMC,QAAU,EAAI,GAAK,GASzC,SAASS,EAAU7B,GAWjB,IAXuB,IAAD,IAChB8B,EAAO9B,EAAI+B,OAAOC,QACtB1B,EAAM2B,SAAQ,SAAAhB,GAAI,4BACbT,EAAMoB,KAAI,SAAAd,GAAI,MAAK,CAAEG,OAAMH,YADd,YAEbP,EAAKqB,KAAI,SAAAd,GAAI,MAAK,CAAEG,OAAMH,iBAI3BoB,EAAQ,GACRC,EAAQ,GAELC,EAAI,EAAGA,EAzHA,EAyHeA,IAC7BF,EAAMG,KAAKP,EAAKQ,OAChBH,EAAME,KAAKP,EAAKQ,OAGlB,IAAMC,EAAW,kBAAMC,OAAOC,YAAYnC,EAAMsB,KAAI,SAAAX,GAAI,MAAI,CAACA,EAAM,SAEnE,MAAO,CACLb,OAAQ,CACN0B,QAEFzB,SAAO,mBACJI,EAAW,CACViC,KAAMR,IAFH,cAIJxB,EAAW,CACVgC,KAAMP,IALH,GAQPQ,QAAM,mBACHlC,EAAW8B,KADR,cAEH7B,EAAW6B,KAFR,GAINK,UAAWL,IACXM,SAAUf,EAAKV,QAUnB,SAAS0B,EAAc/C,EAAGC,EAAKY,GAC7B,OAAOb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKM,WAAU,gBAAGlC,EAAH,EAAGA,KAAMG,EAAT,EAASA,KAAT,OAAoBH,IAASF,EAAKE,MAAQG,IAASL,EAAKK,QAStG,SAASgC,EAAmBlD,EAAGC,EAAKY,GAGzC,IAAW,IAFDkC,EAAc/C,EAAGC,EAAKY,GAG9B,MAAO,0BAGT,IAAMsC,EAAeC,YAAKpD,EAAE4C,OAAO3C,EAAI+C,eAAenC,EAAKK,OAE3D,OAAoB,MAAhBiC,IAAyBvC,EAAMuC,IAAiBtC,EAAKE,KAAOoC,EAAapC,KACpE,yBADT,EA8BK,SAASsC,EAAqBrD,EAAGC,EAAKY,GAG3C,IAAW,IAFDkC,EAAc/C,EAAGC,EAAKY,GAG9B,MAAO,0BA4BJ,SAASyC,EAAoBtD,EAAGuD,GACrC,GAAmB,IAAfvD,EAAE8C,SACJ,MAAO,aAiCJ,SAASU,EAAuBxD,EAAGC,EAAKiB,GAC7C,IAAKX,EAAMO,SAASI,GAClB,MAAO,uBAGT,IAAML,EAAOuC,YAAKpD,EAAE6C,UAAU3B,IAE9B,OAAY,MAARL,EACK,sCAGLA,EAAK4C,OAASxD,EAAIwD,KACb,uCADT,EAuBF,IAAMC,EAAO,CACXC,KAAM,iBAENC,WAAY,EACZC,WAAY,EAMZC,MAAO,SAAC7D,GAAD,0BACL8D,QAAM,mBACHrD,EAAW,IADR,cAEHC,EAAW,IAFR,GAINqD,MAAO,GACJlC,EAAU7B,KAGfgE,MAAO,CACLC,gBAAiB,CACfC,KA3IN,SAAyBnE,EAAGC,EAAKY,GAC/B,GAAwC,MAApCqC,EAAmBlD,EAAGC,EAAKY,GAC7B,OAAOuD,IAGT,IAAM/B,EAAIU,EAAc/C,EAAGC,EAAKY,GAChCb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAK0B,OAAOhC,EAAG,GAC5CrC,EAAE4C,OAAO3C,EAAI+C,eAAenC,EAAKK,MAAMoB,KAAvC,2BAAiDzB,GAAjD,IAAuD4C,KAAMxD,EAAIwD,QACjExD,EAAIqE,OAAOC,SAAS,aAoIhBC,QAAQ,GAEVC,kBAAmB,CACjBN,KA9GN,SAA2BnE,EAAGC,EAAKY,GACjC,GAA0C,MAAtCwC,EAAqBrD,EAAGC,EAAKY,GAC/B,OAAOuD,IAGT,IAAM/B,EAAIU,EAAc/C,EAAGC,EAAKY,GAChCb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAK0B,OAAOhC,EAAG,GAC5CrC,EAAE6C,UAAUhC,EAAKK,MAAMoB,KAAvB,2BAAiCzB,GAAjC,IAAuC4C,KAAMxD,EAAIwD,QACjDxD,EAAIqE,OAAOC,SAAS,aAuGhBC,QAAQ,IAIZf,KAAM,CACJiB,QA5PJ,SAAqB1E,GACnB,OAAO,2BAAKA,GAAZ,IAAe8C,SAAU9C,EAAEK,OAAO0B,KAAKV,UA6PrCsD,OAAQ,CACNC,SAAU,CACRX,MAAO,CACLY,iBAAkB,CAChBV,KA7FZ,SAA0BnE,EAAGC,GAC3B,GAAmC,MAA/BqD,EAAoBtD,GACtB,OAAOoE,IAGT,IAAMvD,EAAOb,EAAEK,OAAO0B,KAAKQ,MAG3B,GAFAvC,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKL,KAAKzB,GAEV,IAAzBb,EAAEK,OAAO0B,KAAKV,OAAc,CAC9B,IAAMyD,EA/MV,SAAoB9E,EAAGC,GACrB,cAAqB,CAACS,EAAUC,GAAhC,eAA2C,CAAtC,IAAMoE,EAAM,KACTnC,EAASH,OAAOuC,OAAOvC,OAAOuC,OAAOhF,EAAE4C,OAAOmC,KAC9CE,EAAQrD,YAAIgB,EAAOf,KAAI,SAAAT,GAAK,OAAID,EAAUC,OAChDpB,EAAE+D,OAAOgB,GAAQzC,KAAK2C,GAGxB,IAGIH,EAHEI,EAAetD,YAAI5B,EAAE+D,OAAOrD,IAC5ByE,EAAevD,YAAI5B,EAAE+D,OAAOpD,IAKhCmE,EADEI,EAAeC,EACVzE,EACEyE,EAAeD,GAGjBjF,EAAI+C,gBAAkBtC,EAFtBC,EAE4CD,EAGrDV,EAAEgE,QAEF,cAA2BvB,OAAO2C,QAAQtD,EAAU7B,IAApD,eAA2D,CAAC,IAAD,sBAA/CoF,EAA+C,KAA1CC,EAA0C,KACzDtF,EAAEqF,GAAOC,EAGX,OAAOR,EAqLQS,CAAWvF,EAAGC,GAC3BA,EAAIqE,OAAOkB,QAAQ,CAAEV,cAErB7E,EAAIqE,OAAOkB,WAkFHhB,QAAQ,GAEViB,oBAAqB,CACnBtB,KAnDZ,SAA6BnE,EAAGC,EAAKiB,GACnC,GAA4C,MAAxCsC,EAAuBxD,EAAGC,EAAKiB,GACjC,OAAOkD,IAGT,IAAMvD,EAAOb,EAAE6C,UAAU3B,GAAMqB,MAC/BvC,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKL,KAAKzB,GACvCZ,EAAIqE,OAAOkB,WA6CDhB,QAAQ,OAOlBkB,MAzUF,SAAuB1F,GACrB,KAAIA,EAAEgE,MA3BW,GA2BjB,CAIA,IAAMkB,EAAetD,YAAI5B,EAAE+D,OAAOrD,IAC5ByE,EAAevD,YAAI5B,EAAE+D,OAAOpD,IAYlC,MAAO,CAAEgF,OARLT,EAAeC,EACRzE,EACAyE,EAAeD,EACfvE,EAEA,UA4TXiF,WAAY9F,IAAWC,cAEvBuE,OAAQ,CACNuB,UAAU,EACVL,SAAS,EACTM,UAAU,EACVC,SAAS,EACTxB,UAAU,EACVyB,UAAU,EACVC,kBAAkB,GAGpBC,aAAa,GAGAxC,a,oKC9Yf,SAASyC,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OACVC,EAAOD,EAAS,EAAI,mDAAehG,EACnCkF,EAAQgB,KAAKC,IAAIH,GAEvB,OACE,uBAAMI,UAAU,SAAhB,UACGH,EADH,IACUf,EADV,OAaJ,SAASmB,EAAT,GAAuD,IAArCrF,EAAoC,EAApCA,MAAO2C,EAA6B,EAA7BA,OAAQ2C,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACxC,OACE,sBAAKH,UAAU,SAAf,UACGG,EACD,wBAAOH,UAAU,cAAjB,UAAgCE,EAAhC,IAAyC,cAACP,EAAD,CAAQC,OAAQxE,YAAImC,QAC7D,oBAAIyC,UAAU,UAAd,SACG/D,OAAO2C,QAAQhE,GAAOS,KAAI,mCAAEX,EAAF,KAAQE,EAAR,YACzB,oBAAeoF,UAAWI,IAAW,OAAQ1F,EAAT,gBAAwBE,EAAMC,SAAlE,SACE,cAACwF,EAAD,CAAMzF,MAAOA,KADNF,WAmBnB,SAAS4F,EAAT,GAAoG,IAA/E9G,EAA8E,EAA9EA,EAAGC,EAA2E,EAA3EA,IAAK8G,EAAsE,EAAtEA,WAAYC,EAA0D,EAA1DA,WAAYC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,YAAazB,EAAuB,EAAvBA,oBACpE0B,EAAWC,uBAAY,SAAiCC,GAC5D,IAAMnG,EAAOmG,EAAMC,OAAOhC,MAC1ByB,EAAW7F,KACV,CAAC6F,IAEJ,OACE,sBAAKP,UAAU,YAAf,UACGU,EACD,uBAAOV,UAAU,cAAjB,6BACA,6BACG/D,OAAO2C,QAAQpF,EAAE6C,WAAWhB,KAAI,YAAoB,IAAD,mBAAjBX,EAAiB,KAAXE,EAAW,KAC5CmG,EAAE,qBAAiBrG,GACnBsG,EAAUtG,IAAS8F,EACnBS,GAAeR,GAAoD,MAAxCzD,iCAAuBxD,EAAGC,EAAKiB,GAChE,OACE,qBAAesF,UAAWI,IAAW,OAAQ1F,EAAT,gBAAwBE,EAAMC,QAAU,CAAEmG,YAA9E,UACGtG,IAAS8F,GAAcvB,EACxB,cAACoB,EAAD,CAAMzF,MAAOA,IACb,uBACEsG,KAAK,QACL/D,KAAK,aACL2B,MAAOpE,EACPiG,SAAUA,EACVK,QAASA,EACTP,UAAWQ,EACXF,GAAIA,IAEN,wBAAOI,QAASJ,EAAIf,UAAWI,IAAW,CAAEK,UAAWQ,IAAvD,kBACQvG,OAbDA,WA0BrB,SAAS0G,EAAK/G,GACZ,OACE,sBAAM2F,UAAWI,IAAW,OAAQ/F,EAAKK,MAAzC,SACE,sBAAMsF,UAAU,OAAhB,SAAwB5F,gBAAMC,GAAQ,MAAQA,EAAKE,SAUzD,SAAS8F,EAAT,GAAqC,IAArBzF,EAAoB,EAApBA,MAAOoF,EAAa,EAAbA,UAKrB,OAJKqB,MAAMC,QAAQ1G,KACjBA,EAAQ2G,YAAM3G,GAAOS,KAAI,SAAAQ,GAAC,MAAK,CAAEnB,KAAM,aAAcH,MAAiB,KAAVsB,EAAI,QAIhE,oBAAImE,UAAWI,IAAW,OAAQJ,GAAlC,SACGpF,EAAMS,KAAI,SAAAhB,GAAI,OACb,6BACE,cAAC+G,EAAD,eAAU/G,KADHG,oBAAUH,SAkB3B,SAASmH,EAAT,GAA+F,IAA/ElF,EAA8E,EAA9EA,SAAUkB,EAAoE,EAApEA,MAAOa,EAA6D,EAA7DA,iBAAkBzD,EAA2C,EAA3CA,MAAO6G,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,WAAYjB,EAAY,EAAZA,SAC1EE,EAAWC,uBAAY,SAAiCC,GAC5D,IAAMxG,EAAOsH,KAAKC,MAAMf,EAAMC,OAAOhC,OACrC2C,EAAWpH,KACV,CAACoH,IAEJ,OACE,sBAAKzB,UAAU,OAAf,UACE,wBAAOA,UAAU,cAAjB,kBAAqCxC,EAAQ,KAC7C,sBAAKwC,UAAU,UAAf,UACE,sBAAKA,UAAU,WAAf,UACG3B,EACD,cAACgC,EAAD,CAAMzF,MAAO0B,OAEf,oBAAI0D,UAAS,gBAAWpF,EAAMC,QAA9B,SACGD,EAAMiH,MAAK,SAACC,EAAOC,GAAR,OAAkBvH,oBAAUsH,GAAStH,oBAAUuH,MAAQ1G,KAAI,SAAChB,GACtE,IAAM0G,EAAE,qBAAiBvG,oBAAUH,IAC7B2G,EAAU3G,EAAKK,QAAL,OAAcgH,QAAd,IAAcA,OAAd,EAAcA,EAAYhH,OAAQL,EAAKE,QAAL,OAAcmH,QAAd,IAAcA,OAAd,EAAcA,EAAYnH,MAC5E,OACE,qBAAayF,UAAWI,IAAW,CAAEY,YAArC,UACE,uBACEE,KAAK,QACL/D,KAAK,aACL2B,MAAO6C,KAAKK,UAAU3H,GACtBsG,SAAUA,EACVK,QAASA,EACTP,SAAUA,EACVM,GAAIA,IAEN,uBAAOI,QAASJ,EAAIf,UAAWI,IAAW,CAAEK,aAA5C,SACE,cAACW,EAAD,eAAU/G,QAXL0G,cA4BvB,SAASkB,EAAT,GAA6C,IAAzB9E,EAAwB,EAAxBA,KAAMgC,EAAkB,EAAlBA,OAAQ5B,EAAU,EAAVA,OAChC,OACE,+BACE,+BACGJ,EACAgC,GAAU,sBAAM+C,KAAK,MAAMC,aAAW,SAA5B,6BAEZ5E,EAAOlC,KAAI,SAACoD,EAAO5C,GAAR,OACV,6BAAY,cAAC8D,EAAD,CAAQC,OAAQnB,KAAnB5C,MAEX,6BAAI,cAAC8D,EAAD,CAAQC,OAAQxE,YAAImC,UAaf,SAAS6E,EAAT,GAAwD,IAAvC5I,EAAsC,EAAtCA,EAAGC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,SAAU+D,EAAoB,EAApBA,MAAO4E,EAAa,EAAbA,UAAa,EAChCC,wBAAS1I,GADuB,mBAC7D8H,EAD6D,KACjDa,EADiD,OAEhCD,wBAAS1I,GAFuB,mBAE7D4G,EAF6D,KAEjDgC,EAFiD,KAIpEC,qBAAU,WACRF,OAAc3I,GACd4I,OAAc5I,KACb,CAAC2I,EAAeC,EAAe/I,EAAIwD,OAEtC,IAsCIkD,EAAUO,EAAarC,EAAkBY,EAtCvCyD,EAAWL,EAAUM,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAO8B,OAAOnJ,MAC/CoJ,EAAgBJ,EAAS3B,GAAGgC,WAC5BC,EAAWvJ,EAAI+C,gBAAkB9C,EACjCuJ,EAAQxJ,EAAIyJ,cAAgBzJ,EAAIyJ,cAAcxJ,GAAY,WAEhE,GAAID,EAAI0J,SAAU,CAChB,IAAMC,EAAY5J,EAAE+D,OAAO7D,GAAUmB,OAErC,OACE,sBAAKmF,UAAU,WAAf,UACE,kCACE,gCACE,+BACE,wCACCuB,YAAM6B,GAAW/H,KAAI,SAAAQ,GAAC,OACrB,wCAAmBA,EAAI,IAAdA,MAEX,4CAGJ,kCACE,cAACoG,EAAD,CACE9E,KAAK,MACLI,OAAQ/D,EAAE+D,OAAO7D,GACjByF,OAAQ1F,EAAI0J,SAAShE,SAAWzF,IAElC,cAACuI,EAAD,CACE9E,KAAMuF,EAASvF,KACfI,OAAQ/D,EAAE+D,OAAOuF,GACjB3D,OAAQ1F,EAAI0J,SAAShE,SAAW2D,UAItC,cAAC,IAAD,CAAMO,GAAG,OAAT,2CAiDN,OA1CIL,GAAsB,aAAVC,GAAsC,MAAdvB,GACtCvB,EACE,wBACEH,UAAU,SACVsD,QAAS,kBAAM7F,EAAMC,gBAAgBgE,IACrCjB,SAAoD,MAA1C/D,6BAAmBlD,EAAGC,EAAKiI,GAHvC,uBASFhB,EACE,wBACEV,UAAU,SACVsD,QAAS,kBAAM7F,EAAMQ,kBAAkByD,IACvCjB,SAAsD,MAA5C5D,+BAAqBrD,EAAGC,EAAKiI,GAHzC,2BAQOsB,GAAsB,aAAVC,IACrB5E,EACE,wBACE2B,UAAU,SACVsD,QAAS,kBAAM7F,EAAMY,oBACrBoC,SAAyC,MAA/B3D,8BAAoBtD,EAAGC,GAHnC,uBASFwF,EAAsBuB,GACpB,yBACER,UAAU,SACVsD,QAAS,kBAAM7F,EAAMwB,oBAAoBuB,IACzCC,SAAwD,MAA9CzD,iCAAuBxD,EAAGC,EAAK+G,GAH3C,kBAKQA,MAMV,sBAAKR,UAAWI,IAAW,CAAEmD,SAAUP,IAAvC,UACE,cAAC/C,EAAD,CACErF,MAAOpB,EAAE4C,OAAO0G,GAChBvF,OAAQ/D,EAAE+D,OAAOuF,GACjB5C,QAASwC,EAASvF,OAEpB,cAACmD,EAAD,CACE9G,EAAGA,EACHC,IAAKA,EACL8G,WAAYiC,EACZhC,WAAYA,EACZC,UAAWuC,GAAsB,aAAVC,EACvBvC,YAAaA,EACbzB,oBAAqBA,IAEvB,cAACgB,EAAD,CACErF,MAAOpB,EAAE4C,OAAO1C,GAChB6D,OAAQ/D,EAAE+D,OAAO7D,GACjBwG,QAAQ,MACRC,SAAUA,IAEZ,cAACqB,EAAD,CACElF,SAAU9C,EAAE8C,SACZkB,MAAOhE,EAAEgE,MACTa,iBAAkBA,EAClBzD,MAAOpB,EAAEM,QAAQJ,GAAUyC,KAC3BsF,WAAYc,EACZb,WAAYA,EACZjB,UAAWuC,GAAsB,aAAVC","file":"static/js/6.ac1bb543.chunk.js","sourcesContent":["export { v as ActivePlayers, h as INVALID_MOVE, S as Stage, T as TurnOrder } from './turn-order-7578f7f3.js';\nimport 'immer';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * PlayerView reducers.\r\n */\r\nconst PlayerView = {\r\n    /**\r\n     * STRIP_SECRETS\r\n     *\r\n     * Reducer which removes a key named `secret` and\r\n     * removes all the keys in `players`, except for the one\r\n     * corresponding to the current playerID.\r\n     */\r\n    STRIP_SECRETS: (G, ctx, playerID) => {\r\n        let r = { ...G };\r\n        if (r.secret !== undefined) {\r\n            delete r.secret;\r\n        }\r\n        if (r.players) {\r\n            r.players = {\r\n                [playerID]: r.players[playerID],\r\n            };\r\n        }\r\n        return r;\r\n    },\r\n};\n\nexport { PlayerView };\n","import { INVALID_MOVE, PlayerView } from 'boardgame.io/core';\nimport { last, partition, sum } from '../utils';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n\n/**\n * @typedef {object} Card\n * @property {string} suit\n * @property {number} rank\n *\n * @typedef {{\n *   [suit: string]: (Card & { turn: number })[],\n * }} Cards\n *\n * @typedef {{\n *   secret: {\n *     deck: Card[],\n *   },\n *   players: {\n *     [player: string]: {\n *       hand: Card[],\n *     },\n *   },\n *   played: {\n *     [player: string]: Cards,\n *   },\n *   discarded: Cards,\n *   deckSize: number,\n * }} GameState\n *\n * @typedef {{\n *   scores: {\n *     [player: string]: number[],\n *   },\n *   round: number;\n * }} GameContext\n *\n * @typedef {GameState & GameContext} G\n */\n\nconst SUITS = ['yellow', 'blue', 'white', 'green', 'red' ];\nconst BETS = [-1, -2, -3];\nconst RANKS = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst NUM_ROUNDS = 3;\nconst HAND_SIZE = 8;\n\nconst PLAYER_1 = '0';\nconst PLAYER_2 = '1';\n\n/**\n * @param {Card} card\n * @returns {boolean}\n */\nexport function isBet(card) {\n  return BETS.includes(card.rank);\n}\n\n/**\n * @param {Card} card\n * @returns {number}\n */\nexport function toOrdinal(card) {\n  return (SUITS.indexOf(card.suit) + 1) * 100 + card.rank;\n}\n\n/**\n * @param {G} G\n * @returns {{ winner: string }?}\n */\nfunction checkGameOver(G) {\n  if (G.round < NUM_ROUNDS) {\n    return undefined;\n  }\n\n  const player1Score = sum(G.scores[PLAYER_1]);\n  const player2Score = sum(G.scores[PLAYER_2]);\n\n  let winner;\n\n  if (player1Score > player2Score) {\n    winner = PLAYER_1;\n  } else if (player2Score > player1Score) {\n    winner = PLAYER_2;\n  } else {\n    winner = 'tied';\n  }\n\n  return { winner };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {string}\n */\nfunction onRoundEnd(G, ctx) {\n  for (const player of [PLAYER_1, PLAYER_2]) {\n    const played = Object.values(Object.values(G.played[player]));\n    const score = sum(played.map(cards => scoreSuit(cards)));\n    G.scores[player].push(score);\n  }\n\n  const player1Score = sum(G.scores[PLAYER_1]);\n  const player2Score = sum(G.scores[PLAYER_2]);\n\n  let next;\n\n  if (player1Score > player2Score) {\n    next = PLAYER_1;\n  } else if (player2Score > player1Score) {\n    next = PLAYER_2;\n  } else {\n    next = ctx.currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n  }\n\n  G.round++;\n\n  for (const [key, value] of Object.entries(dealCards(ctx))) {\n    G[key] = value;\n  }\n\n  return next;\n}\n\n/**\n * @param {G} G\n * @returns {G}\n */\nfunction onTurnStart(G) {\n  return { ...G, deckSize: G.secret.deck.length };\n}\n\n/**\n * @param {Card[]} cards\n * @returns {number}\n */\nexport function scoreSuit(cards) {\n  if (cards.length === 0) {\n    return 0;\n  }\n\n  const { true: bets, false: ranks } = partition(cards, card => isBet(card));\n\n  const numBets = bets.length;\n  const score = sum(ranks.map(card => card.rank));\n  const bonus = cards.length >= 8 ? 20 : 0;\n\n  return (score - 20) * (numBets + 1) + bonus;\n}\n\n/**\n * @param {Ctx} ctx\n * @returns {GameState}\n */\nfunction dealCards(ctx) {\n  const deck = ctx.random.Shuffle(\n    SUITS.flatMap(suit => [\n      ...RANKS.map(rank => ({ suit, rank })),\n      ...BETS.map(rank => ({ suit, rank })),\n    ])\n  );\n\n  const hand1 = [];\n  const hand2 = [];\n\n  for (let i = 0; i < HAND_SIZE; i++) {\n    hand1.push(deck.pop());\n    hand2.push(deck.pop());\n  }\n\n  const newCards = () => Object.fromEntries(SUITS.map(suit => [suit, []]));\n\n  return {\n    secret: {\n      deck,\n    },\n    players: {\n      [PLAYER_1]: {\n        hand: hand1,\n      },\n      [PLAYER_2]: {\n        hand: hand2,\n      },\n    },\n    played: {\n      [PLAYER_1]: newCards(),\n      [PLAYER_2]: newCards(),\n    },\n    discarded: newCards(),\n    deckSize: deck.length,\n  };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {number}\n */\nfunction findCardIndex(G, ctx, card) {\n  return G.players[ctx.currentPlayer].hand.findIndex(({ rank, suit }) => rank === card.rank && suit === card.suit);\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {string=}\n */\nexport function canPlayCardToBoard(G, ctx, card) {\n  const i = findCardIndex(G, ctx, card);\n\n  if (i === -1) {\n    return 'card_not_in_player_hand';\n  }\n\n  const previousCard = last(G.played[ctx.currentPlayer][card.suit]);\n\n  if (previousCard != null && !isBet(previousCard) && card.rank < previousCard.rank) {\n    return 'card_out_of_order';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {INVALID_MOVE=}\n */\nfunction playCardToBoard(G, ctx, card) {\n  if (canPlayCardToBoard(G, ctx, card) != null) {\n    return INVALID_MOVE;\n  }\n\n  const i = findCardIndex(G, ctx, card);\n  G.players[ctx.currentPlayer].hand.splice(i, 1);\n  G.played[ctx.currentPlayer][card.suit].push({ ...card, turn: ctx.turn });\n  ctx.events.setStage('drawCard');\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {string=}\n */\nexport function canPlayCardToDiscard(G, ctx, card) {\n  const i = findCardIndex(G, ctx, card);\n\n  if (i === -1) {\n    return 'card_not_in_player_hand';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {INVALID_MOVE=}\n */\nfunction playCardToDiscard(G, ctx, card) {\n  if (canPlayCardToDiscard(G, ctx, card) != null) {\n    return INVALID_MOVE;\n  }\n\n  const i = findCardIndex(G, ctx, card);\n  G.players[ctx.currentPlayer].hand.splice(i, 1);\n  G.discarded[card.suit].push({ ...card, turn: ctx.turn });\n  ctx.events.setStage('drawCard');\n}\n\n/**\n * @param {G} G\n * @param {Ctx} _ctx\n * @returns {string=}\n */\nexport function canDrawCardFromDeck(G, _ctx) {\n  if (G.deckSize === 0) {\n    return 'deck_empty';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {INVALID_MOVE=}\n */\nfunction drawCardFromDeck(G, ctx) {\n  if (canDrawCardFromDeck(G, ctx) != null) {\n    return INVALID_MOVE;\n  }\n\n  const card = G.secret.deck.pop();\n  G.players[ctx.currentPlayer].hand.push(card);\n\n  if (G.secret.deck.length === 0) {\n    const next = onRoundEnd(G, ctx);\n    ctx.events.endTurn({ next });\n  } else {\n    ctx.events.endTurn();\n  }\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {string} suit\n * @returns {string=}\n */\nexport function canDrawCardFromDiscard(G, ctx, suit) {\n  if (!SUITS.includes(suit)) {\n    return 'unknown_discard_pile';\n  }\n\n  const card = last(G.discarded[suit]);\n\n  if (card == null) {\n    return 'cannot_draw_from_empty_discard_pile';\n  }\n\n  if (card.turn === ctx.turn) {\n    return 'cannot_draw_just_discarded_card';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {string} suit\n * @returns {INVALID_MOVE?}\n */\nfunction drawCardFromDiscard(G, ctx, suit) {\n  if (canDrawCardFromDiscard(G, ctx, suit) != null) {\n    return INVALID_MOVE;\n  }\n\n  const card = G.discarded[suit].pop();\n  G.players[ctx.currentPlayer].hand.push(card);\n  ctx.events.endTurn();\n}\n\nconst game = {\n  name: 'soaring-cities',\n\n  minPlayers: 2,\n  maxPlayers: 2,\n\n  /**\n   * @param {Ctx} ctx\n   * @returns {G}\n   */\n  setup: (ctx) => ({\n    scores: {\n      [PLAYER_1]: [],\n      [PLAYER_2]: [],\n    },\n    round: 0,\n    ...dealCards(ctx),\n  }),\n\n  moves: {\n    playCardToBoard: {\n      move: playCardToBoard,\n      client: false,\n    },\n    playCardToDiscard: {\n      move: playCardToDiscard,\n      client: false,\n    },\n  },\n\n  turn: {\n    onBegin: onTurnStart,\n\n    stages: {\n      drawCard: {\n        moves: {\n          drawCardFromDeck: {\n            move: drawCardFromDeck,\n            client: false,\n          },\n          drawCardFromDiscard: {\n            move: drawCardFromDiscard,\n            client: false,\n          },\n        },\n      },\n    },\n  },\n\n  endIf: checkGameOver,\n\n  playerView: PlayerView.STRIP_SECRETS,\n\n  events: {\n    endStage: false,\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    setStage: false,\n    setPhase: false,\n    setActivePlayers: false,\n  },\n\n  disableUndo: true,\n};\n\nexport default game;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { canDrawCardFromDeck, canDrawCardFromDiscard, canPlayCardToBoard, canPlayCardToDiscard, isBet, toOrdinal } from '../../../shared/games/lc';\nimport { range, sum } from '../../../shared/utils';\nimport './index.scss';\n\n/** @typedef {import('react').ChangeEvent<HTMLInputElement>} InputChangeEvent **/\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/src/types').LobbyAPI.Match} Match **/\n/** @typedef {import('../../../shared/games/lc').G} G */\n/** @typedef {import('../../../shared/games/lc').Card} Card */\n/** @typedef {import('../../../shared/games/lc').Cards} Cards */\n\n/**\n * @param {object} props\n * @param {number} props.points\n */\nfunction Points({ points }) {\n  const sign = points < 0 ? <>&minus;</> : undefined;\n  const value = Math.abs(points);\n\n  return (\n    <span className=\"points\">\n      {sign}${value}M\n    </span>\n  )\n}\n\n/**\n * @param {object} props\n * @param {Cards} props.cards\n * @param {number[]} props.scores\n * @param {string} props.caption\n * @param {any=} props.playCard\n */\nfunction Played({ cards, scores, caption, playCard }) {\n  return (\n    <div className=\"played\">\n      {playCard}\n      <label className=\"description\">{caption} <Points points={sum(scores)} /></label>\n      <ul className=\"content\">\n        {Object.entries(cards).map(([suit, cards]) => (\n          <li key={suit} className={classNames('suit', suit, `cards-${cards.length}`)}>\n            <Deck cards={cards} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {any} props.onPickSuit\n * @param {string} props.pickedSuit\n * @param {boolean} props.disabled\n * @param {any} props.discardCard\n * @param {any} props.drawCardFromDiscard\n */\nfunction Discarded({ G, ctx, onPickSuit, pickedSuit, disabled, discardCard, drawCardFromDiscard }) {\n  const onChange = useCallback((/** @type {InputChangeEvent} */ event) => {\n    const suit = event.target.value;\n    onPickSuit(suit);\n  }, [onPickSuit]);\n\n  return (\n    <div className=\"discarded\">\n      {discardCard}\n      <label className=\"description\">Discarded cards</label>\n      <ul>\n        {Object.entries(G.discarded).map(([suit, cards]) => {\n          const id = `pickedSuit-${suit}`;\n          const checked = suit === pickedSuit;\n          const isMoveLegal = !disabled && canDrawCardFromDiscard(G, ctx, suit) == null;\n          return (\n            <li key={suit} className={classNames('suit', suit, `cards-${cards.length}`, { checked })}>\n              {suit === pickedSuit && drawCardFromDiscard}\n              <Deck cards={cards} />\n              <input\n                type=\"radio\"\n                name=\"pickedSuit\"\n                value={suit}\n                onChange={onChange}\n                checked={checked}\n                disabled={!isMoveLegal}\n                id={id}\n              />\n              <label htmlFor={id} className={classNames({ disabled: !isMoveLegal })}>\n                Pick {suit}\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * @param {Card} card\n */\nfunction Card(card) {\n  return (\n    <span className={classNames('card', card.suit)}>\n      <span className=\"rank\">{isBet(card) ? 'bet' : card.rank}</span>\n    </span>\n  )\n}\n\n/**\n * @param {object} props\n * @param {Card[] | number} props.cards\n * @param {string=} props.className\n */\nfunction Deck({ cards, className }) {\n  if (!Array.isArray(cards)) {\n    cards = range(cards).map(i => ({ suit: 'background', rank: (i + 1) * -100}));\n  }\n\n  return (\n    <ol className={classNames('deck', className)}>\n      {cards.map(card => (\n        <li key={toOrdinal(card)}>\n          <Card {...card} />\n        </li>\n      ))}\n    </ol>\n  );\n}\n\n/**\n * @param {object} props\n * @param {number} props.deckSize\n * @param {number} props.round\n * @param {any} props.drawCardFromDeck\n * @param {Card[]} props.cards\n * @param {any} props.onPickCard\n * @param {Card} props.pickedCard\n * @param {boolean} props.disabled\n */\nfunction Hand({ deckSize, round, drawCardFromDeck, cards, onPickCard, pickedCard, disabled }) {\n  const onChange = useCallback((/** @type {InputChangeEvent} */ event) => {\n    const card = JSON.parse(event.target.value);\n    onPickCard(card);\n  }, [onPickCard]);\n\n  return (\n    <div className=\"hand\">\n      <label className=\"description\">Hand {round + 1}</label>\n      <div className=\"content\">\n        <div className=\"drawpile\">\n          {drawCardFromDeck}\n          <Deck cards={deckSize} />\n        </div>\n        <ul className={`cards-${cards.length}`}>\n          {cards.sort((card1, card2) => toOrdinal(card1) - toOrdinal(card2)).map((card) => {\n            const id = `pickedCard-${toOrdinal(card)}`;\n            const checked = card.suit === pickedCard?.suit && card.rank === pickedCard?.rank;\n            return (\n              <li key={id} className={classNames({ checked })}>\n                <input\n                  type=\"radio\"\n                  name=\"pickedCard\"\n                  value={JSON.stringify(card)}\n                  onChange={onChange}\n                  checked={checked}\n                  disabled={disabled}\n                  id={id}\n                />\n                <label htmlFor={id} className={classNames({ disabled })}>\n                  <Card {...card} />\n                </label>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {string} props.name\n * @param {boolean} props.winner\n * @param {number[]} props.scores\n */\nfunction ScoreRow({ name, winner, scores }) {\n  return (\n    <tr>\n      <td>\n        {name}\n        {winner && <span role=\"img\" aria-label=\"Winner\">🏆</span>}\n      </td>\n      {scores.map((score, i) =>\n        <td key={i}><Points points={score} /></td>\n      )}\n      <td><Points points={sum(scores)} /></td>\n    </tr>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {string} props.playerID\n * @param {any} props.moves\n * @param {Match['players']} props.matchData\n */\nexport default function Board({ G, ctx, playerID, moves, matchData }) {\n  const [pickedCard, setPickedCard] = useState(undefined);\n  const [pickedSuit, setPickedSuit] = useState(undefined);\n\n  useEffect(() => {\n    setPickedCard(undefined);\n    setPickedSuit(undefined);\n  }, [setPickedCard, setPickedSuit, ctx.turn]);\n\n  const opponent = matchData.find(u => u.id !== Number(playerID));\n  const otherPlayerID = opponent.id.toString();\n  const isActive = ctx.currentPlayer === playerID;\n  const stage = ctx.activePlayers ? ctx.activePlayers[playerID] : 'playCard';\n\n  if (ctx.gameover) {\n    const numRounds = G.scores[playerID].length;\n\n    return (\n      <div className=\"gameover\">\n        <table>\n          <thead>\n            <tr>\n              <th>Player</th>\n              {range(numRounds).map(i =>\n                <th key={i}>Round {i + 1}</th>\n              )}\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ScoreRow\n              name=\"You\"\n              scores={G.scores[playerID]}\n              winner={ctx.gameover.winner === playerID}\n            />\n            <ScoreRow\n              name={opponent.name}\n              scores={G.scores[otherPlayerID]}\n              winner={ctx.gameover.winner === otherPlayerID}\n            />\n          </tbody>\n        </table>\n        <Link to=\"/new\">Click to play another game</Link>\n      </div>\n    );\n  }\n\n  let playCard, discardCard, drawCardFromDeck, drawCardFromDiscard;\n\n  if (isActive && stage === 'playCard' && pickedCard != null) {\n    playCard = (\n      <button\n        className=\"action\"\n        onClick={() => moves.playCardToBoard(pickedCard)}\n        disabled={canPlayCardToBoard(G, ctx, pickedCard) != null}\n      >\n        Play card\n      </button>\n    );\n\n    discardCard = (\n      <button\n        className=\"action\"\n        onClick={() => moves.playCardToDiscard(pickedCard)}\n        disabled={canPlayCardToDiscard(G, ctx, pickedCard) != null}\n      >\n        Discard card\n      </button>\n    );\n  } else if (isActive && stage === 'drawCard') {\n    drawCardFromDeck = (\n      <button\n        className=\"action\"\n        onClick={() => moves.drawCardFromDeck()}\n        disabled={canDrawCardFromDeck(G, ctx) != null}\n      >\n        Draw card\n      </button>\n    );\n\n    drawCardFromDiscard = pickedSuit && (\n      <button\n        className=\"action\"\n        onClick={() => moves.drawCardFromDiscard(pickedSuit)}\n        disabled={canDrawCardFromDiscard(G, ctx, pickedSuit) != null}\n      >\n        Pick {pickedSuit}\n      </button>\n    );\n  }\n\n  return (\n    <div className={classNames({ waiting: !isActive })}>\n      <Played\n        cards={G.played[otherPlayerID]}\n        scores={G.scores[otherPlayerID]}\n        caption={opponent.name}\n      />\n      <Discarded\n        G={G}\n        ctx={ctx}\n        onPickSuit={setPickedSuit}\n        pickedSuit={pickedSuit}\n        disabled={!isActive || stage !== 'drawCard'}\n        discardCard={discardCard}\n        drawCardFromDiscard={drawCardFromDiscard}\n      />\n      <Played\n        cards={G.played[playerID]}\n        scores={G.scores[playerID]}\n        caption=\"You\"\n        playCard={playCard}\n      />\n      <Hand\n        deckSize={G.deckSize}\n        round={G.round}\n        drawCardFromDeck={drawCardFromDeck}\n        cards={G.players[playerID].hand}\n        onPickCard={setPickedCard}\n        pickedCard={pickedCard}\n        disabled={!isActive || stage !== 'playCard'}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}