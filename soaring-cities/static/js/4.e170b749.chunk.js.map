{"version":3,"sources":["../node_modules/boardgame.io/dist/esm/core.js","shared/games/lc.js","frontend/boards/lc/index.js"],"names":["PlayerView","STRIP_SECRETS","G","ctx","playerID","r","undefined","secret","players","SUITS","BETS","RANKS","PLAYER_1","PLAYER_2","isBet","card","includes","rank","toOrdinal","indexOf","suit","scoreSuit","cards","length","partition","bets","true","ranks","false","numBets","sum","map","dealCards","deck","random","Shuffle","flatMap","hand1","hand2","i","push","pop","newCards","Object","fromEntries","hand","played","discarded","deckSize","findCardIndex","currentPlayer","findIndex","canPlayCardToBoard","previousCard","last","canPlayCardToDiscard","canDrawCardFromDeck","_ctx","canDrawCardFromDiscard","turn","game","name","minPlayers","maxPlayers","setup","scores","round","moves","playCardToBoard","move","INVALID_MOVE","splice","events","setStage","client","playCardToDiscard","onBegin","stages","drawCard","drawCardFromDeck","next","player","values","score","player1Score","player2Score","entries","key","value","onRoundEnd","endTurn","drawCardFromDiscard","endIf","winner","playerView","endStage","endPhase","endGame","setPhase","setActivePlayers","disableUndo","Deck","className","Points","points","sign","Math","abs","Played","caption","classNames","Card","Discarded","onPickSuit","pickedSuit","disabled","onChange","useCallback","event","target","id","checked","type","htmlFor","Hand","onPickCard","pickedCard","JSON","parse","sort","card1","card2","stringify","Actions","content","active","stage","onClick","ScoreRow","role","aria-label","Board","matchData","useState","setPickedCard","setPickedSuit","useEffect","opponent","find","u","Number","otherPlayerID","toString","isActive","activePlayers","gameover","numRounds","range","to"],"mappings":"oKAaMA,EAAa,CAQfC,cAAe,SAACC,EAAGC,EAAKC,GACpB,IAAIC,EAAI,eAAKH,GASb,YARiBI,IAAbD,EAAEE,eACKF,EAAEE,OAETF,EAAEG,UACFH,EAAEG,QAAF,eACKJ,EAAWC,EAAEG,QAAQJ,KAGvBC,K,ibCSTI,EAAQ,CAAC,SAAU,OAAQ,QAAS,QAAS,OAC7CC,EAAO,EAAE,GAAI,GAAI,GACjBC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAKjCC,EAAW,IACXC,EAAW,IAMV,SAASC,EAAMC,GACpB,OAAOL,EAAKM,SAASD,EAAKE,MAOrB,SAASC,EAAUH,GACxB,OAAwC,KAAhCN,EAAMU,QAAQJ,EAAKK,MAAQ,GAAWL,EAAKE,KA0E9C,SAASI,EAAUC,GACxB,GAAqB,IAAjBA,EAAMC,OACR,OAAO,EAFsB,MAKMC,YAAUF,GAAO,SAAAP,GAAI,OAAID,EAAMC,MAAtDU,EALiB,EAKvBC,KAAmBC,EALI,EAKXC,MAEdC,EAAUJ,EAAKF,OAIrB,OAHcO,YAAIH,EAAMI,KAAI,SAAAhB,GAAI,OAAIA,EAAKE,SAGzB,KAAOY,EAAU,IAFnBP,EAAMC,QAAU,EAAI,GAAK,GASzC,SAASS,EAAU7B,GAWjB,IAXuB,IAAD,IAChB8B,EAAO9B,EAAI+B,OAAOC,QACtB1B,EAAM2B,SAAQ,SAAAhB,GAAI,4BACbT,EAAMoB,KAAI,SAAAd,GAAI,MAAK,CAAEG,OAAMH,YADd,YAEbP,EAAKqB,KAAI,SAAAd,GAAI,MAAK,CAAEG,OAAMH,iBAI3BoB,EAAQ,GACRC,EAAQ,GAELC,EAAI,EAAGA,EAzHA,EAyHeA,IAC7BF,EAAMG,KAAKP,EAAKQ,OAChBH,EAAME,KAAKP,EAAKQ,OAGlB,IAAMC,EAAW,kBAAMC,OAAOC,YAAYnC,EAAMsB,KAAI,SAAAX,GAAI,MAAI,CAACA,EAAM,SAEnE,MAAO,CACLb,OAAQ,CACN0B,QAEFzB,SAAO,mBACJI,EAAW,CACViC,KAAMR,IAFH,cAIJxB,EAAW,CACVgC,KAAMP,IALH,GAQPQ,QAAM,mBACHlC,EAAW8B,KADR,cAEH7B,EAAW6B,KAFR,GAINK,UAAWL,IACXM,SAAUf,EAAKV,QAUnB,SAAS0B,EAAc/C,EAAGC,EAAKY,GAC7B,OAAOb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKM,WAAU,gBAAGlC,EAAH,EAAGA,KAAMG,EAAT,EAASA,KAAT,OAAoBH,IAASF,EAAKE,MAAQG,IAASL,EAAKK,QAStG,SAASgC,EAAmBlD,EAAGC,EAAKY,GAGzC,IAAW,IAFDkC,EAAc/C,EAAGC,EAAKY,GAG9B,MAAO,0BAGT,IAAMsC,EAAeC,YAAKpD,EAAE4C,OAAO3C,EAAI+C,eAAenC,EAAKK,OAE3D,OAAoB,MAAhBiC,IAAyBvC,EAAMuC,IAAiBtC,EAAKE,KAAOoC,EAAapC,KACpE,yBADT,EA8BK,SAASsC,EAAqBrD,EAAGC,EAAKY,GAG3C,IAAW,IAFDkC,EAAc/C,EAAGC,EAAKY,GAG9B,MAAO,0BA4BJ,SAASyC,EAAoBtD,EAAGuD,GACrC,GAAmB,IAAfvD,EAAE8C,SACJ,MAAO,aAiCJ,SAASU,EAAuBxD,EAAGC,EAAKiB,GAC7C,IAAKX,EAAMO,SAASI,GAClB,MAAO,uBAGT,IAAML,EAAOuC,YAAKpD,EAAE6C,UAAU3B,IAE9B,OAAY,MAARL,EACK,sCAGLA,EAAK4C,OAASxD,EAAIwD,KACb,uCADT,EAuBF,IAAMC,EAAO,CACXC,KAAM,iBAENC,WAAY,EACZC,WAAY,EAMZC,MAAO,SAAC7D,GAAD,0BACL8D,QAAM,mBACHrD,EAAW,IADR,cAEHC,EAAW,IAFR,GAINqD,MAAO,GACJlC,EAAU7B,KAGfgE,MAAO,CACLC,gBAAiB,CACfC,KA3IN,SAAyBnE,EAAGC,EAAKY,GAC/B,GAAwC,MAApCqC,EAAmBlD,EAAGC,EAAKY,GAC7B,OAAOuD,IAGT,IAAM/B,EAAIU,EAAc/C,EAAGC,EAAKY,GAChCb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAK0B,OAAOhC,EAAG,GAC5CrC,EAAE4C,OAAO3C,EAAI+C,eAAenC,EAAKK,MAAMoB,KAAvC,2BAAiDzB,GAAjD,IAAuD4C,KAAMxD,EAAIwD,QACjExD,EAAIqE,OAAOC,SAAS,aAoIhBC,QAAQ,GAEVC,kBAAmB,CACjBN,KA9GN,SAA2BnE,EAAGC,EAAKY,GACjC,GAA0C,MAAtCwC,EAAqBrD,EAAGC,EAAKY,GAC/B,OAAOuD,IAGT,IAAM/B,EAAIU,EAAc/C,EAAGC,EAAKY,GAChCb,EAAEM,QAAQL,EAAI+C,eAAeL,KAAK0B,OAAOhC,EAAG,GAC5CrC,EAAE6C,UAAUhC,EAAKK,MAAMoB,KAAvB,2BAAiCzB,GAAjC,IAAuC4C,KAAMxD,EAAIwD,QACjDxD,EAAIqE,OAAOC,SAAS,aAuGhBC,QAAQ,IAIZf,KAAM,CACJiB,QA5PJ,SAAqB1E,GACnB,OAAO,2BAAKA,GAAZ,IAAe8C,SAAU9C,EAAEK,OAAO0B,KAAKV,UA6PrCsD,OAAQ,CACNC,SAAU,CACRX,MAAO,CACLY,iBAAkB,CAChBV,KA7FZ,SAA0BnE,EAAGC,GAC3B,GAAmC,MAA/BqD,EAAoBtD,GACtB,OAAOoE,IAGT,IAAMvD,EAAOb,EAAEK,OAAO0B,KAAKQ,MAG3B,GAFAvC,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKL,KAAKzB,GAEV,IAAzBb,EAAEK,OAAO0B,KAAKV,OAAc,CAC9B,IAAMyD,EA/MV,SAAoB9E,EAAGC,GACrB,cAAqB,CAACS,EAAUC,GAAhC,eAA2C,CAAtC,IAAMoE,EAAM,KACTnC,EAASH,OAAOuC,OAAOvC,OAAOuC,OAAOhF,EAAE4C,OAAOmC,KAC9CE,EAAQrD,YAAIgB,EAAOf,KAAI,SAAAT,GAAK,OAAID,EAAUC,OAChDpB,EAAE+D,OAAOgB,GAAQzC,KAAK2C,GAGxB,IAGIH,EAHEI,EAAetD,YAAI5B,EAAE+D,OAAOrD,IAC5ByE,EAAevD,YAAI5B,EAAE+D,OAAOpD,IAKhCmE,EADEI,EAAeC,EACVzE,EACEyE,EAAeD,GAGjBjF,EAAI+C,gBAAkBtC,EAFtBC,EAE4CD,EAGrDV,EAAEgE,QAEF,cAA2BvB,OAAO2C,QAAQtD,EAAU7B,IAApD,eAA2D,CAAC,IAAD,sBAA/CoF,EAA+C,KAA1CC,EAA0C,KACzDtF,EAAEqF,GAAOC,EAGX,OAAOR,EAqLQS,CAAWvF,EAAGC,GAC3BA,EAAIqE,OAAOkB,QAAQ,CAAEV,cAErB7E,EAAIqE,OAAOkB,WAkFHhB,QAAQ,GAEViB,oBAAqB,CACnBtB,KAnDZ,SAA6BnE,EAAGC,EAAKiB,GACnC,GAA4C,MAAxCsC,EAAuBxD,EAAGC,EAAKiB,GACjC,OAAOkD,IAGT,IAAMvD,EAAOb,EAAE6C,UAAU3B,GAAMqB,MAC/BvC,EAAEM,QAAQL,EAAI+C,eAAeL,KAAKL,KAAKzB,GACvCZ,EAAIqE,OAAOkB,WA6CDhB,QAAQ,OAOlBkB,MAzUF,SAAuB1F,GACrB,KAAIA,EAAEgE,MA3BW,GA2BjB,CAIA,IAAMkB,EAAetD,YAAI5B,EAAE+D,OAAOrD,IAC5ByE,EAAevD,YAAI5B,EAAE+D,OAAOpD,IAYlC,MAAO,CAAEgF,OARLT,EAAeC,EACRzE,EACAyE,EAAeD,EACfvE,EAEA,UA4TXiF,WAAY9F,IAAWC,cAEvBuE,OAAQ,CACNuB,UAAU,EACVL,SAAS,EACTM,UAAU,EACVC,SAAS,EACTxB,UAAU,EACVyB,UAAU,EACVC,kBAAkB,GAGpBC,aAAa,GAGAxC,a,0LC7Yf,SAASyC,EAAT,GAAoC,IAApBrD,EAAmB,EAAnBA,SAAUkB,EAAS,EAATA,MACxB,OACE,sBAAKoC,UAAU,OAAf,mBACSpC,EAAQ,EADjB,sBACuClB,KAS3C,SAASuD,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OACVC,EAAOD,EAAS,EAAI,mDAAelG,EACnCkF,EAAQkB,KAAKC,IAAIH,GAEvB,OACE,uBAAMF,UAAU,SAAhB,UACGG,EADH,IACUjB,EADV,OAYJ,SAASoB,EAAT,GAA6C,IAA3BtF,EAA0B,EAA1BA,MAAO2C,EAAmB,EAAnBA,OAAQ4C,EAAW,EAAXA,QAC/B,OACE,sBAAKP,UAAU,SAAf,UACE,kCAAQO,EAAR,KAAkB,cAACN,EAAD,CAAQC,OAAQ1E,YAAImC,QACtC,6BACGtB,OAAO2C,QAAQhE,GAAOS,KAAI,mCAAEX,EAAF,KAAQE,EAAR,YACzB,oBAAegF,UAAWQ,IAAW,OAAQ1F,EAAT,gBAAwBE,EAAMC,SAAlE,SACE,6BACGD,EAAMS,KAAI,SAAAhB,GAAI,OACb,6BACE,cAACgG,EAAD,eAAUhG,KADHG,oBAAUH,UAHhBK,WAuBnB,SAAS4F,EAAT,GAAkE,IAA7C9G,EAA4C,EAA5CA,EAAGC,EAAyC,EAAzCA,IAAK8G,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAC7CC,EAAWC,uBAAY,SAAiCC,GAC5D,IAAMlG,EAAOkG,EAAMC,OAAO/B,MAC1ByB,EAAW7F,KACV,CAAC6F,IAEJ,OACE,sBAAKX,UAAU,YAAf,UACE,oDACA,6BACG3D,OAAO2C,QAAQpF,EAAE6C,WAAWhB,KAAI,YAAoB,IAAD,mBAAjBX,EAAiB,KAAXE,EAAW,KAC5CkG,EAAE,qBAAiBpG,GACnBqG,EAAUrG,IAAS8F,EACzB,OACE,qBAAeZ,UAAWQ,IAAW,OAAQ1F,EAAT,gBAAwBE,EAAMC,QAAU,CAAEkG,YAA9E,UACE,6BACGnG,EAAMS,KAAI,SAAAhB,GAAI,OACb,6BACE,cAACgG,EAAD,eAAUhG,KADHG,oBAAUH,SAKvB,uBACE2G,KAAK,QACL7D,KAAK,aACL2B,MAAOpE,EACPgG,SAAUA,EACVK,QAASA,EACTN,SAAUA,GAAoD,MAAxCzD,iCAAuBxD,EAAGC,EAAKiB,GACrDoG,GAAIA,IAEN,wBAAOG,QAASH,EAAhB,kBACQpG,OAlBDA,WA+BrB,SAAS2F,EAAKhG,GACZ,OACE,sBAAMuF,UAAWQ,IAAW,OAAQ/F,EAAKK,MAAzC,SACGN,gBAAMC,GAAQ,MAAQA,EAAKE,OAYlC,SAAS2G,EAAT,GAA4D,IAA5CtG,EAA2C,EAA3CA,MAAOuG,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,WAAYX,EAAY,EAAZA,SACvCC,EAAWC,uBAAY,SAAiCC,GAC5D,IAAMvG,EAAOgH,KAAKC,MAAMV,EAAMC,OAAO/B,OACrCqC,EAAW9G,KACV,CAAC8G,IAEJ,OACE,sBAAKvB,UAAU,OAAf,UACE,8CACA,6BACGhF,EAAM2G,MAAK,SAACC,EAAOC,GAAR,OAAkBjH,oBAAUgH,GAAShH,oBAAUiH,MAAQpG,KAAI,SAAChB,GACtE,IAAMyG,EAAE,qBAAiBtG,oBAAUH,IAC7B0G,EAAU1G,EAAKK,QAAL,OAAc0G,QAAd,IAAcA,OAAd,EAAcA,EAAY1G,OAAQL,EAAKE,QAAL,OAAc6G,QAAd,IAAcA,OAAd,EAAcA,EAAY7G,MAC5E,OACE,qBAAaqF,UAAWQ,IAAW,CAAEW,YAArC,UACE,uBACEC,KAAK,QACL7D,KAAK,aACL2B,MAAOuC,KAAKK,UAAUrH,GACtBqG,SAAUA,EACVK,QAASA,EACTN,SAAUA,EACVK,GAAIA,IAEN,uBAAOG,QAASH,EAAhB,SACE,cAACT,EAAD,eAAUhG,QAXLyG,WA+BrB,SAASa,EAAT,GAAgE,IAC1DC,EADapI,EAA4C,EAA5CA,EAAGC,EAAyC,EAAzCA,IAAKY,EAAoC,EAApCA,KAAMK,EAA8B,EAA9BA,KAAM+C,EAAwB,EAAxBA,MAAOoE,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAyCpD,OAtCID,GAAoB,aAAVC,EACZF,EACE,qCACE,wBACEG,QAAS,kBAAMtE,EAAMC,gBAAgBrD,IACrCoG,SAAkB,MAARpG,GAAoD,MAApCqC,6BAAmBlD,EAAGC,EAAKY,GAFvD,uBAMA,wBACE0H,QAAS,kBAAMtE,EAAMQ,kBAAkB5D,IACvCoG,SAAkB,MAARpG,GAAsD,MAAtCwC,+BAAqBrD,EAAGC,EAAKY,GAFzD,6BAQKwH,GAAoB,aAAVC,EACnBF,EACE,qCACE,wBACEG,QAAS,kBAAMtE,EAAMY,oBACrBoC,SAAyC,MAA/B3D,8BAAoBtD,EAAGC,GAFnC,uBAMA,yBACEsI,QAAS,kBAAMtE,EAAMwB,oBAAoBvE,IACzC+F,SAAkB,MAAR/F,GAAwD,MAAxCsC,iCAAuBxD,EAAGC,EAAKiB,GAF3D,kBAIQA,GAAQ,kBAIVmH,IACVD,EAAU,6DAIV,qBAAKhC,UAAU,UAAf,SACGgC,IAWP,SAASI,EAAT,GAA6C,IAAzB7E,EAAwB,EAAxBA,KAAMgC,EAAkB,EAAlBA,OAAQ5B,EAAU,EAAVA,OAChC,OACE,+BACE,+BACGJ,EACAgC,GAAU,sBAAM8C,KAAK,MAAMC,aAAW,SAA5B,6BAEZ3E,EAAOlC,KAAI,SAACoD,EAAO5C,GAAR,OACV,6BAAY,cAACgE,EAAD,CAAQC,OAAQrB,KAAnB5C,MAEX,6BAAI,cAACgE,EAAD,CAAQC,OAAQ1E,YAAImC,UAaf,SAAS4E,EAAT,GAAwD,IAAvC3I,EAAsC,EAAtCA,EAAGC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,SAAU+D,EAAoB,EAApBA,MAAO2E,EAAa,EAAbA,UAAa,EAChCC,wBAASzI,GADuB,mBAC7DwH,EAD6D,KACjDkB,EADiD,OAEhCD,wBAASzI,GAFuB,mBAE7D4G,EAF6D,KAEjD+B,EAFiD,KAIpEC,qBAAU,WACRF,OAAc1I,GACd2I,OAAc3I,KACb,CAAC0I,EAAeC,EAAe9I,EAAIwD,OAEtC,IAAMwF,EAAWL,EAAUM,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAO8B,OAAOlJ,MAC/CmJ,EAAgBJ,EAAS3B,GAAGgC,WAC5BC,EAAWtJ,EAAI+C,gBAAkB9C,EACjCoI,EAAQrI,EAAIuJ,cAAgBvJ,EAAIuJ,cAActJ,GAAY,WAEhE,GAAID,EAAIwJ,SAAU,CAChB,IAAMC,EAAY1J,EAAE+D,OAAO7D,GAAUmB,OAErC,OACE,sBAAK+E,UAAU,WAAf,UACE,kCACE,gCACE,+BACE,wCACCuD,YAAMD,GAAW7H,KAAI,SAAAQ,GAAC,OACrB,wCAAmBA,EAAI,IAAdA,MAEX,4CAGJ,kCACE,cAACmG,EAAD,CACE7E,KAAK,MACLI,OAAQ/D,EAAE+D,OAAO7D,GACjByF,OAAQ1F,EAAIwJ,SAAS9D,SAAWzF,IAElC,cAACsI,EAAD,CACE7E,KAAMsF,EAAStF,KACfI,OAAQ/D,EAAE+D,OAAOsF,GACjB1D,OAAQ1F,EAAIwJ,SAAS9D,SAAW0D,UAItC,cAAC,IAAD,CAAMO,GAAG,OAAT,2CAKN,OACE,qCACE,cAACzD,EAAD,CACErD,SAAU9C,EAAE8C,SACZkB,MAAOhE,EAAEgE,QAEX,cAAC0C,EAAD,CACEtF,MAAOpB,EAAE4C,OAAOyG,GAChBtF,OAAQ/D,EAAE+D,OAAOsF,GACjB1C,QAAO,UAAKsC,EAAStF,KAAd,cAET,cAACmD,EAAD,CACE9G,EAAGA,EACHC,IAAKA,EACL8G,WAAYgC,EACZ/B,WAAYA,EACZC,UAAWsC,GAAsB,aAAVjB,IAEzB,cAAC5B,EAAD,CACEtF,MAAOpB,EAAE4C,OAAO1C,GAChB6D,OAAQ/D,EAAE+D,OAAO7D,GACjByG,QAAQ,eAEV,cAACe,EAAD,CACEtG,MAAOpB,EAAEM,QAAQJ,GAAUyC,KAC3BgF,WAAYmB,EACZlB,WAAYA,EACZX,UAAWsC,GAAsB,aAAVjB,IAEzB,cAACH,EAAD,CACEnI,EAAGA,EACHC,IAAKA,EACLgE,MAAOA,EACPpD,KAAM+G,EACN1G,KAAM8F,EACNsB,MAAOA,EACPD,OAAQkB","file":"static/js/4.e170b749.chunk.js","sourcesContent":["export { v as ActivePlayers, h as INVALID_MOVE, S as Stage, T as TurnOrder } from './turn-order-7578f7f3.js';\nimport 'immer';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * PlayerView reducers.\r\n */\r\nconst PlayerView = {\r\n    /**\r\n     * STRIP_SECRETS\r\n     *\r\n     * Reducer which removes a key named `secret` and\r\n     * removes all the keys in `players`, except for the one\r\n     * corresponding to the current playerID.\r\n     */\r\n    STRIP_SECRETS: (G, ctx, playerID) => {\r\n        let r = { ...G };\r\n        if (r.secret !== undefined) {\r\n            delete r.secret;\r\n        }\r\n        if (r.players) {\r\n            r.players = {\r\n                [playerID]: r.players[playerID],\r\n            };\r\n        }\r\n        return r;\r\n    },\r\n};\n\nexport { PlayerView };\n","import { INVALID_MOVE, PlayerView } from 'boardgame.io/core';\nimport { last, partition, sum } from '../utils';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n\n/**\n * @typedef {object} Card\n * @property {string} suit\n * @property {number} rank\n *\n * @typedef {{\n *   [suit: string]: (Card & { turn: number })[],\n * }} Cards\n *\n * @typedef {{\n *   secret: {\n *     deck: Card[],\n *   },\n *   players: {\n *     [player: string]: {\n *       hand: Card[],\n *     },\n *   },\n *   played: {\n *     [player: string]: Cards,\n *   },\n *   discarded: Cards,\n *   deckSize: number,\n * }} GameState\n *\n * @typedef {{\n *   scores: {\n *     [player: string]: number[],\n *   },\n *   round: number;\n * }} GameContext\n *\n * @typedef {GameState & GameContext} G\n */\n\nconst SUITS = ['yellow', 'blue', 'white', 'green', 'red' ];\nconst BETS = [-1, -2, -3];\nconst RANKS = [2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst NUM_ROUNDS = 3;\nconst HAND_SIZE = 8;\n\nconst PLAYER_1 = '0';\nconst PLAYER_2 = '1';\n\n/**\n * @param {Card} card\n * @returns {boolean}\n */\nexport function isBet(card) {\n  return BETS.includes(card.rank);\n}\n\n/**\n * @param {Card} card\n * @returns {number}\n */\nexport function toOrdinal(card) {\n  return (SUITS.indexOf(card.suit) + 1) * 100 + card.rank;\n}\n\n/**\n * @param {G} G\n * @returns {{ winner: string }?}\n */\nfunction checkGameOver(G) {\n  if (G.round < NUM_ROUNDS) {\n    return undefined;\n  }\n\n  const player1Score = sum(G.scores[PLAYER_1]);\n  const player2Score = sum(G.scores[PLAYER_2]);\n\n  let winner;\n\n  if (player1Score > player2Score) {\n    winner = PLAYER_1;\n  } else if (player2Score > player1Score) {\n    winner = PLAYER_2;\n  } else {\n    winner = 'tied';\n  }\n\n  return { winner };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {string}\n */\nfunction onRoundEnd(G, ctx) {\n  for (const player of [PLAYER_1, PLAYER_2]) {\n    const played = Object.values(Object.values(G.played[player]));\n    const score = sum(played.map(cards => scoreSuit(cards)));\n    G.scores[player].push(score);\n  }\n\n  const player1Score = sum(G.scores[PLAYER_1]);\n  const player2Score = sum(G.scores[PLAYER_2]);\n\n  let next;\n\n  if (player1Score > player2Score) {\n    next = PLAYER_1;\n  } else if (player2Score > player1Score) {\n    next = PLAYER_2;\n  } else {\n    next = ctx.currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n  }\n\n  G.round++;\n\n  for (const [key, value] of Object.entries(dealCards(ctx))) {\n    G[key] = value;\n  }\n\n  return next;\n}\n\n/**\n * @param {G} G\n * @returns {G}\n */\nfunction onTurnStart(G) {\n  return { ...G, deckSize: G.secret.deck.length };\n}\n\n/**\n * @param {Card[]} cards\n * @returns {number}\n */\nexport function scoreSuit(cards) {\n  if (cards.length === 0) {\n    return 0;\n  }\n\n  const { true: bets, false: ranks } = partition(cards, card => isBet(card));\n\n  const numBets = bets.length;\n  const score = sum(ranks.map(card => card.rank));\n  const bonus = cards.length >= 8 ? 20 : 0;\n\n  return (score - 20) * (numBets + 1) + bonus;\n}\n\n/**\n * @param {Ctx} ctx\n * @returns {GameState}\n */\nfunction dealCards(ctx) {\n  const deck = ctx.random.Shuffle(\n    SUITS.flatMap(suit => [\n      ...RANKS.map(rank => ({ suit, rank })),\n      ...BETS.map(rank => ({ suit, rank })),\n    ])\n  );\n\n  const hand1 = [];\n  const hand2 = [];\n\n  for (let i = 0; i < HAND_SIZE; i++) {\n    hand1.push(deck.pop());\n    hand2.push(deck.pop());\n  }\n\n  const newCards = () => Object.fromEntries(SUITS.map(suit => [suit, []]));\n\n  return {\n    secret: {\n      deck,\n    },\n    players: {\n      [PLAYER_1]: {\n        hand: hand1,\n      },\n      [PLAYER_2]: {\n        hand: hand2,\n      },\n    },\n    played: {\n      [PLAYER_1]: newCards(),\n      [PLAYER_2]: newCards(),\n    },\n    discarded: newCards(),\n    deckSize: deck.length,\n  };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {number}\n */\nfunction findCardIndex(G, ctx, card) {\n  return G.players[ctx.currentPlayer].hand.findIndex(({ rank, suit }) => rank === card.rank && suit === card.suit);\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {string=}\n */\nexport function canPlayCardToBoard(G, ctx, card) {\n  const i = findCardIndex(G, ctx, card);\n\n  if (i === -1) {\n    return 'card_not_in_player_hand';\n  }\n\n  const previousCard = last(G.played[ctx.currentPlayer][card.suit]);\n\n  if (previousCard != null && !isBet(previousCard) && card.rank < previousCard.rank) {\n    return 'card_out_of_order';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {INVALID_MOVE=}\n */\nfunction playCardToBoard(G, ctx, card) {\n  if (canPlayCardToBoard(G, ctx, card) != null) {\n    return INVALID_MOVE;\n  }\n\n  const i = findCardIndex(G, ctx, card);\n  G.players[ctx.currentPlayer].hand.splice(i, 1);\n  G.played[ctx.currentPlayer][card.suit].push({ ...card, turn: ctx.turn });\n  ctx.events.setStage('drawCard');\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {string=}\n */\nexport function canPlayCardToDiscard(G, ctx, card) {\n  const i = findCardIndex(G, ctx, card);\n\n  if (i === -1) {\n    return 'card_not_in_player_hand';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {Card} card\n * @returns {INVALID_MOVE=}\n */\nfunction playCardToDiscard(G, ctx, card) {\n  if (canPlayCardToDiscard(G, ctx, card) != null) {\n    return INVALID_MOVE;\n  }\n\n  const i = findCardIndex(G, ctx, card);\n  G.players[ctx.currentPlayer].hand.splice(i, 1);\n  G.discarded[card.suit].push({ ...card, turn: ctx.turn });\n  ctx.events.setStage('drawCard');\n}\n\n/**\n * @param {G} G\n * @param {Ctx} _ctx\n * @returns {string=}\n */\nexport function canDrawCardFromDeck(G, _ctx) {\n  if (G.deckSize === 0) {\n    return 'deck_empty';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {INVALID_MOVE=}\n */\nfunction drawCardFromDeck(G, ctx) {\n  if (canDrawCardFromDeck(G, ctx) != null) {\n    return INVALID_MOVE;\n  }\n\n  const card = G.secret.deck.pop();\n  G.players[ctx.currentPlayer].hand.push(card);\n\n  if (G.secret.deck.length === 0) {\n    const next = onRoundEnd(G, ctx);\n    ctx.events.endTurn({ next });\n  } else {\n    ctx.events.endTurn();\n  }\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {string} suit\n * @returns {string=}\n */\nexport function canDrawCardFromDiscard(G, ctx, suit) {\n  if (!SUITS.includes(suit)) {\n    return 'unknown_discard_pile';\n  }\n\n  const card = last(G.discarded[suit]);\n\n  if (card == null) {\n    return 'cannot_draw_from_empty_discard_pile';\n  }\n\n  if (card.turn === ctx.turn) {\n    return 'cannot_draw_just_discarded_card';\n  }\n\n  return undefined;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {string} suit\n * @returns {INVALID_MOVE?}\n */\nfunction drawCardFromDiscard(G, ctx, suit) {\n  if (canDrawCardFromDiscard(G, ctx, suit) != null) {\n    return INVALID_MOVE;\n  }\n\n  const card = G.discarded[suit].pop();\n  G.players[ctx.currentPlayer].hand.push(card);\n  ctx.events.endTurn();\n}\n\nconst game = {\n  name: 'soaring-cities',\n\n  minPlayers: 2,\n  maxPlayers: 2,\n\n  /**\n   * @param {Ctx} ctx\n   * @returns {G}\n   */\n  setup: (ctx) => ({\n    scores: {\n      [PLAYER_1]: [],\n      [PLAYER_2]: [],\n    },\n    round: 0,\n    ...dealCards(ctx),\n  }),\n\n  moves: {\n    playCardToBoard: {\n      move: playCardToBoard,\n      client: false,\n    },\n    playCardToDiscard: {\n      move: playCardToDiscard,\n      client: false,\n    },\n  },\n\n  turn: {\n    onBegin: onTurnStart,\n\n    stages: {\n      drawCard: {\n        moves: {\n          drawCardFromDeck: {\n            move: drawCardFromDeck,\n            client: false,\n          },\n          drawCardFromDiscard: {\n            move: drawCardFromDiscard,\n            client: false,\n          },\n        },\n      },\n    },\n  },\n\n  endIf: checkGameOver,\n\n  playerView: PlayerView.STRIP_SECRETS,\n\n  events: {\n    endStage: false,\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    setStage: false,\n    setPhase: false,\n    setActivePlayers: false,\n  },\n\n  disableUndo: true,\n};\n\nexport default game;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { canDrawCardFromDeck, canDrawCardFromDiscard, canPlayCardToBoard, canPlayCardToDiscard, isBet, toOrdinal } from '../../../shared/games/lc';\nimport { range, sum } from '../../../shared/utils';\nimport './index.scss';\n\n/** @typedef {import('react').ChangeEvent<HTMLInputElement>} InputChangeEvent **/\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/src/types').LobbyAPI.Match} Match **/\n/** @typedef {import('../../../shared/games/lc').G} G */\n/** @typedef {import('../../../shared/games/lc').Card} Card */\n/** @typedef {import('../../../shared/games/lc').Cards} Cards */\n\n/**\n * @param {object} props\n * @param {number} props.deckSize\n * @param {number} props.round\n */\nfunction Deck({ deckSize, round }) {\n  return (\n    <div className=\"deck\">\n      Round {round + 1}, cards remaining: {deckSize}\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {number} props.points\n */\nfunction Points({ points }) {\n  const sign = points < 0 ? <>&minus;</> : undefined;\n  const value = Math.abs(points);\n\n  return (\n    <span className=\"points\">\n      {sign}${value}M\n    </span>\n  )\n}\n\n/**\n * @param {object} props\n * @param {Cards} props.cards\n * @param {number[]} props.scores\n * @param {string} props.caption\n */\nfunction Played({ cards, scores, caption }) {\n  return (\n    <div className=\"played\">\n      <label>{caption}, <Points points={sum(scores)} /></label>\n      <ul>\n        {Object.entries(cards).map(([suit, cards]) => (\n          <li key={suit} className={classNames('suit', suit, `cards-${cards.length}`)}>\n            <ol>\n              {cards.map(card => (\n                <li key={toOrdinal(card)}>\n                  <Card {...card} />\n                </li>\n              ))}\n            </ol>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {any} props.onPickSuit\n * @param {string} props.pickedSuit\n * @param {boolean} props.disabled\n */\nfunction Discarded({ G, ctx, onPickSuit, pickedSuit, disabled }) {\n  const onChange = useCallback((/** @type {InputChangeEvent} */ event) => {\n    const suit = event.target.value;\n    onPickSuit(suit);\n  }, [onPickSuit]);\n\n  return (\n    <div className=\"discarded\">\n      <label>Discarded cards</label>\n      <ul>\n        {Object.entries(G.discarded).map(([suit, cards]) => {\n          const id = `pickedSuit-${suit}`;\n          const checked = suit === pickedSuit;\n          return (\n            <li key={suit} className={classNames('suit', suit, `cards-${cards.length}`, { checked })}>\n              <ol>\n                {cards.map(card => (\n                  <li key={toOrdinal(card)}>\n                    <Card {...card} />\n                  </li>\n                ))}\n              </ol>\n              <input\n                type=\"radio\"\n                name=\"pickedSuit\"\n                value={suit}\n                onChange={onChange}\n                checked={checked}\n                disabled={disabled || canDrawCardFromDiscard(G, ctx, suit) != null}\n                id={id}\n              />\n              <label htmlFor={id}>\n                Pick {suit}\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * @param {Card} card\n */\nfunction Card(card) {\n  return (\n    <span className={classNames('card', card.suit)}>\n      {isBet(card) ? 'bet' : card.rank}\n    </span>\n  )\n}\n\n/**\n * @param {object} props\n * @param {Card[]} props.cards\n * @param {any} props.onPickCard\n * @param {Card} props.pickedCard\n * @param {boolean} props.disabled\n */\nfunction Hand({ cards, onPickCard, pickedCard, disabled }) {\n  const onChange = useCallback((/** @type {InputChangeEvent} */ event) => {\n    const card = JSON.parse(event.target.value);\n    onPickCard(card);\n  }, [onPickCard]);\n\n  return (\n    <div className=\"hand\">\n      <label>Your hand</label>\n      <ul>\n        {cards.sort((card1, card2) => toOrdinal(card1) - toOrdinal(card2)).map((card) => {\n          const id = `pickedCard-${toOrdinal(card)}`;\n          const checked = card.suit === pickedCard?.suit && card.rank === pickedCard?.rank;\n          return (\n            <li key={id} className={classNames({ checked })}>\n              <input\n                type=\"radio\"\n                name=\"pickedCard\"\n                value={JSON.stringify(card)}\n                onChange={onChange}\n                checked={checked}\n                disabled={disabled}\n                id={id}\n              />\n              <label htmlFor={id}>\n                <Card {...card} />\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {any} props.moves\n * @param {Card=} props.card\n * @param {string=} props.suit\n * @param {boolean} props.active\n * @param {string} props.stage\n */\nfunction Actions({ G, ctx, card, suit, moves, active, stage }) {\n  let content;\n\n  if (active && stage === 'playCard') {\n    content = (\n      <>\n        <button\n          onClick={() => moves.playCardToBoard(card)}\n          disabled={card == null || canPlayCardToBoard(G, ctx, card) != null}\n        >\n          Play card\n        </button>\n        <button\n          onClick={() => moves.playCardToDiscard(card)}\n          disabled={card == null || canPlayCardToDiscard(G, ctx, card) != null}\n        >\n          Discard card\n        </button>\n      </>\n    );\n  } else if (active && stage === 'drawCard') {\n    content = (\n      <>\n        <button\n          onClick={() => moves.drawCardFromDeck()}\n          disabled={canDrawCardFromDeck(G, ctx) != null}\n        >\n          Draw card\n        </button>\n        <button\n          onClick={() => moves.drawCardFromDiscard(suit)}\n          disabled={suit == null || canDrawCardFromDiscard(G, ctx, suit) != null}\n        >\n          Pick {suit || 'discarded'}\n        </button>\n      </>\n    );\n  } else if (!active) {\n    content = <em>Waiting for opponent&hellip;</em>\n  }\n\n  return (\n    <div className=\"actions\">\n      {content}\n    </div>\n  );\n}\n\n/**\n * @param {object} props\n * @param {string} props.name\n * @param {boolean} props.winner\n * @param {number[]} props.scores\n */\nfunction ScoreRow({ name, winner, scores }) {\n  return (\n    <tr>\n      <td>\n        {name}\n        {winner && <span role=\"img\" aria-label=\"Winner\">🏆</span>}\n      </td>\n      {scores.map((score, i) =>\n        <td key={i}><Points points={score} /></td>\n      )}\n      <td><Points points={sum(scores)} /></td>\n    </tr>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {string} props.playerID\n * @param {any} props.moves\n * @param {Match['players']} props.matchData\n */\nexport default function Board({ G, ctx, playerID, moves, matchData }) {\n  const [pickedCard, setPickedCard] = useState(undefined);\n  const [pickedSuit, setPickedSuit] = useState(undefined);\n\n  useEffect(() => {\n    setPickedCard(undefined);\n    setPickedSuit(undefined);\n  }, [setPickedCard, setPickedSuit, ctx.turn]);\n\n  const opponent = matchData.find(u => u.id !== Number(playerID));\n  const otherPlayerID = opponent.id.toString();\n  const isActive = ctx.currentPlayer === playerID;\n  const stage = ctx.activePlayers ? ctx.activePlayers[playerID] : 'playCard';\n\n  if (ctx.gameover) {\n    const numRounds = G.scores[playerID].length;\n\n    return (\n      <div className=\"gameover\">\n        <table>\n          <thead>\n            <tr>\n              <th>Player</th>\n              {range(numRounds).map(i =>\n                <th key={i}>Round {i + 1}</th>\n              )}\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ScoreRow\n              name=\"You\"\n              scores={G.scores[playerID]}\n              winner={ctx.gameover.winner === playerID}\n            />\n            <ScoreRow\n              name={opponent.name}\n              scores={G.scores[otherPlayerID]}\n              winner={ctx.gameover.winner === otherPlayerID}\n            />\n          </tbody>\n        </table>\n        <Link to=\"/new\">Click to play another game</Link>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Deck\n        deckSize={G.deckSize}\n        round={G.round}\n      />\n      <Played\n        cards={G.played[otherPlayerID]}\n        scores={G.scores[otherPlayerID]}\n        caption={`${opponent.name}'s cards`}\n      />\n      <Discarded\n        G={G}\n        ctx={ctx}\n        onPickSuit={setPickedSuit}\n        pickedSuit={pickedSuit}\n        disabled={!isActive || stage !== 'drawCard'}\n      />\n      <Played\n        cards={G.played[playerID]}\n        scores={G.scores[playerID]}\n        caption=\"Your cards\"\n      />\n      <Hand\n        cards={G.players[playerID].hand}\n        onPickCard={setPickedCard}\n        pickedCard={pickedCard}\n        disabled={!isActive || stage !== 'playCard'}\n      />\n      <Actions\n        G={G}\n        ctx={ctx}\n        moves={moves}\n        card={pickedCard}\n        suit={pickedSuit}\n        stage={stage}\n        active={isActive}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}