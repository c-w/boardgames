{"version":3,"sources":["../node_modules/boardgame.io/dist/esm/core.js","shared/games/fitf.js"],"names":["PlayerView","STRIP_SECRETS","G","ctx","playerID","r","undefined","secret","players","SUITS","RANKS","dealCards","deck","random","Shuffle","map","suit","rank","flat","trumps","pop","turn","hand1","hand2","i","push","tricks","hand","stashed","getPlayers","currentPlayer","opponentID","card","calculateScore","tricksWon","length","t","cards","filter","c","isMoveInvalid","j","activePlayers","played","canFollowSuit","removeAt","some","highestRankInSuit","reduce","max","determineTrickWinner","winner","trumpSuit","last","opponentRank","opponentSuit","next","playCard","INVALID_MOVE","oldTrump","newHand","newCard","events","setStage","endTurn","id","score","scores","newRound","history","startingPlayer","name","minPlayers","maxPlayers","setupDataSchema","required","properties","longGame","title","type","setup","setupData","winningScore","moves","move","client","stages","discard","discardCard","endStage","endIf","playerScores","opponentScores","playerScore","sum","opponentScore","playerView","endPhase","endGame","setPhase","setActivePlayers","disableUndo"],"mappings":"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","file":"static/js/7.50efdbd7.chunk.js","sourcesContent":["export { v as ActivePlayers, h as INVALID_MOVE, S as Stage, T as TurnOrder } from './turn-order-7578f7f3.js';\nimport 'immer';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * PlayerView reducers.\r\n */\r\nconst PlayerView = {\r\n    /**\r\n     * STRIP_SECRETS\r\n     *\r\n     * Reducer which removes a key named `secret` and\r\n     * removes all the keys in `players`, except for the one\r\n     * corresponding to the current playerID.\r\n     */\r\n    STRIP_SECRETS: (G, ctx, playerID) => {\r\n        let r = { ...G };\r\n        if (r.secret !== undefined) {\r\n            delete r.secret;\r\n        }\r\n        if (r.players) {\r\n            r.players = {\r\n                [playerID]: r.players[playerID],\r\n            };\r\n        }\r\n        return r;\r\n    },\r\n};\n\nexport { PlayerView };\n","import { PlayerView, INVALID_MOVE } from 'boardgame.io/core';\nimport { last, removeAt, sum } from '../utils.js';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/packages/core').INVALID_MOVE} INVALID_MOVE **/\n\n/**\n * @typedef {{\n *  suit: string,\n *  rank: number,\n * }} Card\n *\n * @typedef {{\n *   winner: string,\n *   cards: Card[],\n * }[]} Tricks\n *\n * @typedef {{\n *   secret: {\n *     deck: Card[],\n *   },\n *   tricks: Tricks,\n *   trumps: (Card & { turn: number })[],\n *   players: {\n *     [player: string]: {\n *       hand: Card[],\n *       stashed?: Card,\n *     },\n *   },\n * }} GameState\n *\n * @typedef {{\n *   played?: Card,\n *   scores: {\n *     [player: string]: number[],\n *   },\n *   history: Tricks[],\n *   startingPlayer: string,\n *   winningScore: number,\n * }} GameContext\n *\n * @typedef {GameState & GameContext} G\n *\n * @typedef {{\n *   longGame?: boolean,\n * }} SetupData\n */\n\nconst SUITS = ['key', 'tower', 'moon'];\nconst RANKS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst LONG_GAME_WINNING_SCORE = 21;\nconst SHORT_GAME_WINNING_SCORE = 16;\nconst HAND_SIZE = 13;\nconst PLAYER_1 = '0';\nconst PLAYER_2 = '1';\n\n/**\n * @param {Ctx} ctx\n * @returns {GameState}\n */\nfunction dealCards(ctx) {\n  const deck = ctx.random.Shuffle(\n    SUITS.map(suit => RANKS.map(rank => ({ suit, rank }))).flat()\n  );\n\n  const trumps = [{ ...deck.pop(), turn: 0 }];\n\n  const hand1 = [];\n  const hand2 = [];\n\n  for (let i = 0; i < HAND_SIZE; i++) {\n    hand1.push(deck.pop());\n    hand2.push(deck.pop());\n  }\n\n  return {\n    secret: {\n      deck,\n    },\n    tricks: [],\n    trumps,\n    players: {\n      [PLAYER_1]: {\n        hand: hand1,\n        stashed: null,\n      },\n      [PLAYER_2]: {\n        hand: hand2,\n        stashed: null,\n      },\n    },\n  };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @returns {{\n *   opponentID: string,\n *   playerID: string,\n *   hand: Card[],\n *   card: Card,\n * }}\n */\nfunction getPlayers(G, ctx, i=null) {\n  const playerID = ctx.currentPlayer;\n  const opponentID = playerID === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n\n  const hand = [...G.players[playerID].hand];\n\n  const card = i == null\n    ? { ...G.players[playerID].stashed }\n    : hand[i];\n\n  return {\n    opponentID,\n    playerID,\n    hand,\n    card,\n  };\n}\n\n/**\n * @param {Tricks} tricks\n * @returns {number}\n */\nfunction calculateScore(tricks) {\n  const tricksWon = tricks.length;\n\n  let roundScore;\n\n  if (tricksWon <= 3) {\n    roundScore = 6;\n  } else if (tricksWon === 4) {\n    roundScore = 1;\n  } else if (tricksWon === 5) {\n    roundScore = 2;\n  } else if (tricksWon === 6) {\n    roundScore = 3;\n  } else if (tricksWon >= 7 && tricksWon <= 9) {\n    roundScore = 6;\n  } else {\n    roundScore = 0;\n  }\n\n  const extraScore = tricks.map(t => t.cards).flat().filter(c => c.rank === 7).length;\n\n  return roundScore + extraScore;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {{ winner: string }?}\n */\nfunction checkGameOver(G, ctx) {\n  const { playerID, opponentID } = getPlayers(G, ctx);\n\n  const playerScores = G.scores[playerID];\n  const opponentScores = G.scores[opponentID];\n\n  const playerScore = sum(playerScores);\n  const opponentScore = sum(opponentScores);\n\n  if (playerScore < G.winningScore && opponentScore < G.winningScore) {\n    return;\n  }\n\n  if (playerScore > opponentScore) {\n    return { winner: playerID };\n  }\n\n  if (opponentScore > playerScore) {\n    return { winner: opponentID };\n  }\n\n  return last(playerScores) > last(opponentScores)\n    ? { winner: playerID }\n    : { winner: opponentID };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n */\nfunction discardCard(G, ctx, i) {\n  const { playerID, hand } = getPlayers(G, ctx);\n\n  G.players[playerID].hand = removeAt(hand, i);\n\n  ctx.events.endStage();\n\n  playCard(G, ctx);\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param  {...number} cards\n * @returns {string}\n */\nexport function isMoveInvalid(G, ctx, ...cards) {\n  if (cards.length > 2) {\n    return 'played_too_many_cards';\n  }\n\n  const [i, j] = cards;\n  const { playerID, hand, card } = getPlayers(G, ctx, i);\n\n  if (i == null && G.players[playerID].stashed == null) {\n    return 'played_no_card';\n  }\n\n  if (card == null) {\n    return 'played_unknown_card';\n  }\n\n  if (ctx.activePlayers && ctx.activePlayers[playerID] === 'discard') {\n    if (j != null) {\n      return 'discarded_extra_card';\n    }\n\n    return;\n  }\n\n  if (j != null) {\n    if (card.rank !== 3) {\n      return 'played_extra_card';\n    }\n\n    if (hand[j] == null) {\n      return 'played_unknown_extra_card';\n    }\n  }\n\n  if (G.played != null) {\n    const canFollowSuit = removeAt(hand, i).some(c => c.suit === G.played.suit);\n\n    if (card.suit !== G.played.suit && canFollowSuit) {\n      return 'must_follow_suit';\n    }\n\n    const highestRankInSuit = hand\n      .filter(c => c.suit === G.played.suit)\n      .map(c => c.rank)\n      .reduce((max, rank) => max < rank ? rank : max, -1);\n\n    if (G.played.rank === 11 && card.rank !== 1 && card.rank !== highestRankInSuit && highestRankInSuit !== -1) {\n      return 'must_follow_11';\n    }\n  }\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n * @returns {{ winner: string, next: string }}\n */\nfunction determineTrickWinner(G, ctx, i) {\n  const { playerID, opponentID, card } = getPlayers(G, ctx, i);\n\n  const trumpSuit = last(G.trumps).suit;\n\n  let { rank, suit } = card;\n  let opponentRank = G.played.rank;\n  let opponentSuit = G.played.suit;\n\n  if ((rank === 9 || opponentRank === 9) && !(rank === 9 && opponentRank === 9)) {\n    if (rank === 9) {\n      suit = trumpSuit;\n    } else if (opponentRank === 9) {\n      opponentSuit = trumpSuit;\n    }\n  }\n\n  let winner;\n\n  if (suit === trumpSuit && opponentSuit !== trumpSuit) {\n    winner = playerID;\n  } else if (suit !== trumpSuit && opponentSuit === trumpSuit) {\n    winner = opponentID;\n  } else if (suit !== opponentSuit) {\n    winner = opponentID;\n  } else {\n    winner = rank > opponentRank ? playerID : opponentID;\n  }\n\n  let next;\n\n  if (opponentRank === 1 && winner !== opponentID) {\n    next = opponentID;\n  } else if (rank === 1 && winner !== playerID) {\n    next = playerID;\n  } else {\n    next = winner;\n  }\n\n  return { winner, next };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @param {number?} j\n * @returns {INVALID_MOVE?}\n */\nfunction playCard(G, ctx, i=null, j=null) {\n  if (isMoveInvalid(G, ctx, i, j)) {\n    return INVALID_MOVE;\n  }\n\n  const { playerID, opponentID, hand, card } = getPlayers(G, ctx, i);\n\n  if (card.rank === 3 && j != null) {\n    const oldTrump = { ...last(G.trumps) };\n    G.trumps.push({ ...hand[j], turn: ctx.turn });\n    hand[j] = oldTrump;\n  }\n\n  const newHand = removeAt(hand, i);\n\n  if (card.rank === 5 && G.players[playerID].stashed == null && newHand.length !== 0) {\n    const newCard = G.secret.deck.pop();\n\n    G.players[playerID].hand = [...newHand, newCard];\n    G.players[playerID].stashed = card;\n\n    ctx.events.setStage('discard');\n    return;\n  }\n\n  if (G.played == null) {\n    G.players[playerID].stashed = null;\n    G.players[playerID].hand = newHand;\n    G.played = card;\n    ctx.events.endTurn();\n    return;\n  }\n\n  let { winner, next } = determineTrickWinner(G, ctx, i);\n\n  G.tricks.push({ winner, cards: [{ ...G.played }, { ...card }] });\n  G.played = null;\n  G.players[playerID].stashed = null;\n  G.players[playerID].hand = newHand;\n\n  if (newHand.length === 0) {\n    for (const id of [playerID, opponentID]) {\n      const tricks = G.tricks.filter(t => t.winner === id);\n      const score = calculateScore(tricks);\n      G.scores[id].push(score);\n    }\n\n    const newRound = dealCards(ctx);\n    G.history.push(G.tricks);\n    G.secret = newRound.secret;\n    G.tricks = newRound.tricks;\n    G.trumps = newRound.trumps;\n    G.players = newRound.players;\n    next = G.startingPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    G.startingPlayer = next;\n  }\n\n  ctx.events.endTurn({ next });\n}\n\nexport default {\n  name: 'the-vole-in-the-valley',\n\n  minPlayers: 2,\n  maxPlayers: 2,\n\n  setupDataSchema: {\n    required: [],\n    properties: {\n      longGame: {\n        title: 'Long game',\n        type: 'boolean',\n      },\n    },\n  },\n\n  /**\n   * @param {Ctx} ctx\n   * @param {SetupData?} setupData\n   * @returns {G}\n   */\n  setup: (ctx, setupData) => ({\n    ...dealCards(ctx),\n    played: null,\n    scores: {\n      [PLAYER_1]: [],\n      [PLAYER_2]: [],\n    },\n    history: [],\n    startingPlayer: PLAYER_1,\n    winningScore: setupData?.longGame\n      ? LONG_GAME_WINNING_SCORE\n      : SHORT_GAME_WINNING_SCORE,\n  }),\n\n  moves: {\n    playCard: {\n      move: playCard,\n      client: false,\n    },\n  },\n\n  turn: {\n    stages: {\n      discard: {\n        moves: {\n          discardCard: {\n            move: discardCard,\n            client: false,\n          },\n        },\n      },\n    },\n  },\n\n  endIf: checkGameOver,\n\n  playerView: PlayerView.STRIP_SECRETS,\n\n  events: {\n    endStage: false,\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    setStage: false,\n    setPhase: false,\n    setActivePlayers: false,\n  },\n\n  disableUndo: true,\n};\n"],"sourceRoot":""}