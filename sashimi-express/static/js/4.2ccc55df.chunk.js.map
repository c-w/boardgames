{"version":3,"sources":["../node_modules/boardgame.io/dist/esm/core.js","shared/games/fitf.js","frontend/boards/fitf/index.js"],"names":["PlayerView","STRIP_SECRETS","G","ctx","playerID","r","undefined","secret","players","SUITS","RANKS","PLAYER_1","PLAYER_2","dealCards","deck","random","Shuffle","map","suit","rank","flat","trumps","pop","turn","hand1","hand2","i","push","tricks","hand","stashed","getPlayers","currentPlayer","opponentID","card","calculateScore","tricksWon","length","t","cards","filter","c","isMoveInvalid","j","activePlayers","played","canFollowSuit","removeAt","some","highestRankInSuit","reduce","max","determineTrickWinner","winner","trumpSuit","last","opponentRank","opponentSuit","next","playCard","INVALID_MOVE","oldTrump","newHand","newCard","events","setStage","endTurn","id","score","scores","newRound","history","startingPlayer","game","name","minPlayers","maxPlayers","setupDataSchema","required","properties","longGame","title","type","setup","setupData","winningScore","moves","move","client","stages","discard","discardCard","endStage","endIf","playerScores","opponentScores","playerScore","sum","opponentScore","playerView","endPhase","endGame","setPhase","setActivePlayers","disableUndo","CARD_TEXTS","1","3","5","7","9","11","Card","compact","won","isNew","isOld","className","classNames","new","old","HelpText","useState","shown","setShown","onClick","useCallback","Board","matchData","useHistory","chosen","setChosen","showEndOfRoundScreen","setShowEndOfRoundScreen","event","target","checked","x","canPlay","isActive","includes","isDiscard","isPicked","isEndOfRound","player","opponent","find","u","Number","otherPlayerID","toString","tricksLost","trump","previousTrump","lastTrick","firstPickedCard","useEffect","playerAction","sort","a","b","localeCompare","Stats","showHistory","hideTricks","gameover","role","aria-label","onSubmit","preventDefault","value","disabled","active","picked","onChange"],"mappings":"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","file":"static/js/4.2ccc55df.chunk.js","sourcesContent":["export { v as ActivePlayers, h as INVALID_MOVE, S as Stage, T as TurnOrder } from './turn-order-7578f7f3.js';\nimport 'immer';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * PlayerView reducers.\r\n */\r\nconst PlayerView = {\r\n    /**\r\n     * STRIP_SECRETS\r\n     *\r\n     * Reducer which removes a key named `secret` and\r\n     * removes all the keys in `players`, except for the one\r\n     * corresponding to the current playerID.\r\n     */\r\n    STRIP_SECRETS: (G, ctx, playerID) => {\r\n        let r = { ...G };\r\n        if (r.secret !== undefined) {\r\n            delete r.secret;\r\n        }\r\n        if (r.players) {\r\n            r.players = {\r\n                [playerID]: r.players[playerID],\r\n            };\r\n        }\r\n        return r;\r\n    },\r\n};\n\nexport { PlayerView };\n","import { PlayerView, INVALID_MOVE } from 'boardgame.io/core';\nimport { last, removeAt, sum } from '../utils.js';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/packages/core').INVALID_MOVE} INVALID_MOVE **/\n\n/**\n * @typedef {{\n *  suit: string,\n *  rank: number,\n * }} Card\n *\n * @typedef {{\n *   winner: string,\n *   cards: Array<Card & { playerID: string }>,\n * }[]} Tricks\n *\n * @typedef {{\n *   secret: {\n *     deck: Card[],\n *   },\n *   tricks: Tricks,\n *   trumps: (Card & { turn: number })[],\n *   players: {\n *     [player: string]: {\n *       hand: Card[],\n *       stashed?: Card,\n *     },\n *   },\n * }} GameState\n *\n * @typedef {{\n *   played?: Card,\n *   scores: {\n *     [player: string]: number[],\n *   },\n *   history: Tricks[],\n *   startingPlayer: string,\n *   winningScore: number,\n * }} GameContext\n *\n * @typedef {GameState & GameContext} G\n *\n * @typedef {{\n *   longGame?: boolean,\n * }} SetupData\n */\n\nconst SUITS = ['key', 'tower', 'moon'];\nconst RANKS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst LONG_GAME_WINNING_SCORE = 21;\nconst SHORT_GAME_WINNING_SCORE = 16;\nconst HAND_SIZE = 13;\nconst PLAYER_1 = '0';\nconst PLAYER_2 = '1';\n\n/**\n * @param {Ctx} ctx\n * @returns {GameState}\n */\nfunction dealCards(ctx) {\n  const deck = ctx.random.Shuffle(\n    SUITS.map(suit => RANKS.map(rank => ({ suit, rank }))).flat()\n  );\n\n  const trumps = [{ ...deck.pop(), turn: 0 }];\n\n  const hand1 = [];\n  const hand2 = [];\n\n  for (let i = 0; i < HAND_SIZE; i++) {\n    hand1.push(deck.pop());\n    hand2.push(deck.pop());\n  }\n\n  return {\n    secret: {\n      deck,\n    },\n    tricks: [],\n    trumps,\n    players: {\n      [PLAYER_1]: {\n        hand: hand1,\n        stashed: null,\n      },\n      [PLAYER_2]: {\n        hand: hand2,\n        stashed: null,\n      },\n    },\n  };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @returns {{\n *   opponentID: string,\n *   playerID: string,\n *   hand: Card[],\n *   card: Card,\n * }}\n */\nfunction getPlayers(G, ctx, i=null) {\n  const playerID = ctx.currentPlayer;\n  const opponentID = playerID === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n\n  const hand = [...G.players[playerID].hand];\n\n  const card = i == null\n    ? { ...G.players[playerID].stashed }\n    : hand[i];\n\n  return {\n    opponentID,\n    playerID,\n    hand,\n    card,\n  };\n}\n\n/**\n * @param {Tricks} tricks\n * @returns {number}\n */\nfunction calculateScore(tricks) {\n  const tricksWon = tricks.length;\n\n  let roundScore;\n\n  if (tricksWon <= 3) {\n    roundScore = 6;\n  } else if (tricksWon === 4) {\n    roundScore = 1;\n  } else if (tricksWon === 5) {\n    roundScore = 2;\n  } else if (tricksWon === 6) {\n    roundScore = 3;\n  } else if (tricksWon >= 7 && tricksWon <= 9) {\n    roundScore = 6;\n  } else {\n    roundScore = 0;\n  }\n\n  const extraScore = tricks.map(t => t.cards).flat().filter(c => c.rank === 7).length;\n\n  return roundScore + extraScore;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {{ winner: string }?}\n */\nfunction checkGameOver(G, ctx) {\n  const { playerID, opponentID } = getPlayers(G, ctx);\n\n  const playerScores = G.scores[playerID];\n  const opponentScores = G.scores[opponentID];\n\n  const playerScore = sum(playerScores);\n  const opponentScore = sum(opponentScores);\n\n  if (playerScore < G.winningScore && opponentScore < G.winningScore) {\n    return;\n  }\n\n  if (playerScore > opponentScore) {\n    return { winner: playerID };\n  }\n\n  if (opponentScore > playerScore) {\n    return { winner: opponentID };\n  }\n\n  return last(playerScores) > last(opponentScores)\n    ? { winner: playerID }\n    : { winner: opponentID };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n */\nfunction discardCard(G, ctx, i) {\n  const { playerID, hand } = getPlayers(G, ctx);\n\n  G.players[playerID].hand = removeAt(hand, i);\n\n  ctx.events.endStage();\n\n  playCard(G, ctx);\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param  {...number} cards\n * @returns {string}\n */\nexport function isMoveInvalid(G, ctx, ...cards) {\n  if (cards.length > 2) {\n    return 'played_too_many_cards';\n  }\n\n  const [i, j] = cards;\n  const { playerID, hand, card } = getPlayers(G, ctx, i);\n\n  if (i == null && G.players[playerID].stashed == null) {\n    return 'played_no_card';\n  }\n\n  if (card == null) {\n    return 'played_unknown_card';\n  }\n\n  if (ctx.activePlayers && ctx.activePlayers[playerID] === 'discard') {\n    if (j != null) {\n      return 'discarded_extra_card';\n    }\n\n    return;\n  }\n\n  if (j != null) {\n    if (card.rank !== 3) {\n      return 'played_extra_card';\n    }\n\n    if (hand[j] == null) {\n      return 'played_unknown_extra_card';\n    }\n  }\n\n  if (G.played != null) {\n    const canFollowSuit = removeAt(hand, i).some(c => c.suit === G.played.suit);\n\n    if (card.suit !== G.played.suit && canFollowSuit) {\n      return 'must_follow_suit';\n    }\n\n    const highestRankInSuit = hand\n      .filter(c => c.suit === G.played.suit)\n      .map(c => c.rank)\n      .reduce((max, rank) => max < rank ? rank : max, -1);\n\n    if (G.played.rank === 11 && card.rank !== 1 && card.rank !== highestRankInSuit && highestRankInSuit !== -1) {\n      return 'must_follow_11';\n    }\n  }\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n * @returns {{ winner: string, next: string }}\n */\nfunction determineTrickWinner(G, ctx, i) {\n  const { playerID, opponentID, card } = getPlayers(G, ctx, i);\n\n  const trumpSuit = last(G.trumps).suit;\n\n  let { rank, suit } = card;\n  let opponentRank = G.played.rank;\n  let opponentSuit = G.played.suit;\n\n  if ((rank === 9 || opponentRank === 9) && !(rank === 9 && opponentRank === 9)) {\n    if (rank === 9) {\n      suit = trumpSuit;\n    } else if (opponentRank === 9) {\n      opponentSuit = trumpSuit;\n    }\n  }\n\n  let winner;\n\n  if (suit === trumpSuit && opponentSuit !== trumpSuit) {\n    winner = playerID;\n  } else if (suit !== trumpSuit && opponentSuit === trumpSuit) {\n    winner = opponentID;\n  } else if (suit !== opponentSuit) {\n    winner = opponentID;\n  } else {\n    winner = rank > opponentRank ? playerID : opponentID;\n  }\n\n  let next;\n\n  if (opponentRank === 1 && winner !== opponentID) {\n    next = opponentID;\n  } else if (rank === 1 && winner !== playerID) {\n    next = playerID;\n  } else {\n    next = winner;\n  }\n\n  return { winner, next };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @param {number?} j\n * @returns {INVALID_MOVE?}\n */\nfunction playCard(G, ctx, i=null, j=null) {\n  if (isMoveInvalid(G, ctx, i, j)) {\n    return INVALID_MOVE;\n  }\n\n  const { playerID, opponentID, hand, card } = getPlayers(G, ctx, i);\n\n  if (card.rank === 3 && j != null) {\n    const oldTrump = { ...last(G.trumps) };\n    G.trumps.push({ ...hand[j], turn: ctx.turn });\n    hand[j] = oldTrump;\n  }\n\n  const newHand = removeAt(hand, i);\n\n  if (card.rank === 5 && G.players[playerID].stashed == null && newHand.length !== 0) {\n    const newCard = G.secret.deck.pop();\n\n    G.players[playerID].hand = [...newHand, newCard];\n    G.players[playerID].stashed = card;\n\n    ctx.events.setStage('discard');\n    return;\n  }\n\n  if (G.played == null) {\n    G.players[playerID].stashed = null;\n    G.players[playerID].hand = newHand;\n    G.played = card;\n    ctx.events.endTurn();\n    return;\n  }\n\n  let { winner, next } = determineTrickWinner(G, ctx, i);\n\n  G.tricks.push({ winner, cards: [{ ...G.played, playerID: opponentID }, { ...card, playerID }] });\n  G.played = null;\n  G.players[playerID].stashed = null;\n  G.players[playerID].hand = newHand;\n\n  if (newHand.length === 0) {\n    for (const id of [playerID, opponentID]) {\n      const tricks = G.tricks.filter(t => t.winner === id);\n      const score = calculateScore(tricks);\n      G.scores[id].push(score);\n    }\n\n    const newRound = dealCards(ctx);\n    G.history.push(G.tricks);\n    G.secret = newRound.secret;\n    G.tricks = newRound.tricks;\n    G.trumps = newRound.trumps;\n    G.players = newRound.players;\n    next = G.startingPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    G.startingPlayer = next;\n  }\n\n  ctx.events.endTurn({ next });\n}\n\nconst game = {\n  name: 'the-vole-in-the-valley',\n\n  minPlayers: 2,\n  maxPlayers: 2,\n\n  setupDataSchema: {\n    required: [],\n    properties: {\n      longGame: {\n        title: 'Long game',\n        type: 'boolean',\n      },\n    },\n  },\n\n  /**\n   * @param {Ctx} ctx\n   * @param {SetupData?} setupData\n   * @returns {G}\n   */\n  setup: (ctx, setupData) => ({\n    ...dealCards(ctx),\n    played: null,\n    scores: {\n      [PLAYER_1]: [],\n      [PLAYER_2]: [],\n    },\n    history: [],\n    startingPlayer: PLAYER_1,\n    winningScore: setupData?.longGame\n      ? LONG_GAME_WINNING_SCORE\n      : SHORT_GAME_WINNING_SCORE,\n  }),\n\n  moves: {\n    playCard: {\n      move: playCard,\n      client: false,\n    },\n  },\n\n  turn: {\n    stages: {\n      discard: {\n        moves: {\n          discardCard: {\n            move: discardCard,\n            client: false,\n          },\n        },\n      },\n    },\n  },\n\n  endIf: checkGameOver,\n\n  playerView: PlayerView.STRIP_SECRETS,\n\n  events: {\n    endStage: false,\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    setStage: false,\n    setPhase: false,\n    setActivePlayers: false,\n  },\n\n  disableUndo: true,\n};\n\nexport default game;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { isMoveInvalid } from '../../../shared/games/fitf';\nimport { last, sum } from '../../../shared/utils';\nimport './index.scss';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/src/types').LobbyAPI.Match} Match **/\n/** @typedef {import('../../../shared/games/fitf').Card} Card */\n/** @typedef {import('../../../shared/games/fitf').G} G */\n\nconst CARD_TEXTS = {\n  1: 'If you play this and lose the trick, you lead the next trick.',\n  3: 'When you play this, you may exchange the trump card with a card from your hand.',\n  5: 'When you play this, draw 1 card. Then discard any 1 card.',\n  7: 'The winner of the trick receives 1 point for each 7 in the trick.',\n  9: 'When determining the winner of a trick with only one 9, treat the 9 as if it were in the trump suit.',\n  11: 'When you lead this, if your opponent has a card of this suit, they must play either the 1 of this suit or their highest ranked card of this suit.',\n};\n\n/**\n * @param {object} props\n * @param {Card} props.card\n * @param {boolean=} props.compact\n * @param {boolean=} props.won\n * @param {boolean=} props.isNew\n * @param {boolean=} props.isOld\n */\nfunction Card({ card, compact, won, isNew, isOld }) {\n  return (\n    <span className={classNames('card', card.suit, { won, new: isNew, old: isOld })}>\n      <span className={classNames('content', { compact })}>\n        <span className=\"rank\">{card.rank}</span>\n        <span className=\"suit\">{card.suit}</span>\n      </span>\n    </span>\n  );\n}\n\n/**\n * @param {object} props\n * @param {Card?} props.card\n */\nfunction HelpText({ card }) {\n  const [shown, setShown] = useState(card?.rank % 2 === 1);\n\n  const onClick = useCallback(() => {\n    setShown(false);\n  }, [setShown]);\n\n  if (!card || !shown) {\n    return null;\n  }\n\n  return (\n    <aside onClick={onClick}>\n      {CARD_TEXTS[card.rank]}\n    </aside>\n  )\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {string} props.playerID\n * @param {any} props.moves\n * @param {Match['players']} props.matchData\n */\nexport default function Board({ G, ctx, playerID, moves, matchData }) {\n  const history = useHistory();\n  const [chosen, setChosen] = useState([]);\n  const [showEndOfRoundScreen, setShowEndOfRoundScreen] = useState(false);\n\n  const playCard = (event) => {\n    event.preventDefault();\n    moves.playCard(...chosen);\n    setChosen([]);\n  };\n\n  const discardCard = (event) => {\n    event.preventDefault();\n    moves.discardCard(...chosen);\n    setChosen([]);\n  };\n\n  const onClick = (i) => (event) => {\n    if (event.target.checked) {\n      setChosen([...chosen, i]);\n    } else {\n      setChosen(chosen.filter(x => x !== i));\n    }\n  };\n\n  const canPlay = (i) => {\n    if (!isActive) {\n      return false;\n    }\n\n    if (chosen.includes(i)) {\n      return true;\n    }\n\n    if (isDiscard) {\n      return chosen.length === 0;\n    }\n\n    if (isMoveInvalid(G, ctx, ...chosen, i)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const goToNextRound = (event) => {\n    event.preventDefault();\n    setShowEndOfRoundScreen(false);\n  };\n\n  const goToNewGame = (event) => {\n    event.preventDefault();\n    history.push('/new');\n  };\n\n  const isActive = playerID === ctx.currentPlayer;\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[playerID] === 'discard';\n  const isPicked = chosen.length !== 0;\n  const isEndOfRound = G.tricks.length === 0 && G.history.length > 0;\n  const player = G.players[playerID];\n  const opponent = matchData.find(u => u.id !== Number(playerID));\n  const otherPlayerID = opponent.id.toString();\n  const tricksWon = G.tricks.filter(t => t.winner === playerID).length;\n  const tricksLost = G.tricks.filter(t => t.winner !== playerID).length;\n  const trump = last(G.trumps);\n  const previousTrump = trump.turn > 0 && ctx.turn - trump.turn <= 1 ? G.trumps[G.trumps.length - 2] : null;\n  const lastTrick = isEndOfRound && showEndOfRoundScreen ? last(last(G.history)) : G.tricks.length >= 1 ? last(G.tricks) : null;\n  const firstPickedCard = chosen.length > 0 ? player.hand[chosen[0]] : null;\n\n  useEffect(() => {\n    if (isEndOfRound) {\n      setShowEndOfRoundScreen(true);\n    }\n  }, [setShowEndOfRoundScreen, isEndOfRound]);\n\n  const hand = player.hand.map((card, i) => ({ card, i })).sort((a, b) => {\n    return a.card.suit === b.card.suit\n      ? a.card.rank - b.card.rank\n      : a.card.suit.localeCompare(b.card.suit);\n  });\n\n  const Stats = ({ showHistory=false, hideTricks=false }) => (\n    <div className=\"stats\">\n      <div className=\"score\">\n        <span className=\"label\">Your score</span>\n        <span>{sum(G.scores[playerID])}</span>\n        {showHistory && (\n          <span>\n            (+ {last(G.scores[playerID])})\n          </span>\n        )}\n        {ctx.gameover?.winner === playerID && (\n          <span>\n            <span role=\"img\" aria-label=\"You won\">👑</span>\n          </span>\n        )}\n      </div>\n      <div className=\"score\">\n        <span className=\"label\">{opponent.name} score</span>\n        <span>{sum(G.scores[otherPlayerID])}</span>\n        {showHistory && (\n          <span>\n            (+ {last(G.scores[otherPlayerID])})\n          </span>\n        )}\n        {ctx.gameover?.winner === otherPlayerID && (\n          <span>\n            <span role=\"img\" aria-label={`${opponent.name} won`}>👑</span>\n          </span>\n        )}\n      </div>\n      {!hideTricks && (\n        <div className=\"tricks\">\n          <span className=\"label\">Your tricks</span>\n          <span>{tricksWon}</span>\n        </div>\n      )}\n      {!hideTricks && (\n        <div className=\"tricks\">\n          <span className=\"label\">{opponent.name} tricks</span>\n          <span>{tricksLost}</span>\n        </div>\n      )}\n    </div>\n  );\n\n  if (ctx.gameover) {\n    return (\n      <form onSubmit={goToNewGame} className=\"end-of-game\">\n        <Stats showHistory hideTricks />\n        <input type=\"submit\" value=\"Play again\" />\n      </form>\n    );\n  }\n\n  if (showEndOfRoundScreen) {\n    return (\n      <form onSubmit={goToNextRound} className=\"end-of-round\">\n        <Stats showHistory hideTricks />\n        <input type=\"submit\" value=\"Continue\" />\n      </form>\n    );\n  }\n\n  let playerAction;\n\n  if (isActive && isDiscard) {\n    playerAction = 'Discard card';\n  } else if (isActive && isPicked) {\n    playerAction = 'Play card';\n  } else if (isActive) {\n    playerAction = 'Your move!';\n  } else {\n    playerAction = `Waiting for ${opponent.name}…`;\n  }\n\n  return (\n    <form onSubmit={isDiscard ? discardCard : playCard} className={classNames({ disabled: !isActive })}>\n      <div className=\"board\">\n        <div className=\"info\">\n          <Stats />\n          <div className=\"current-trick\">\n            <input\n              className={classNames({ active: isActive, picked: isPicked })}\n              type=\"submit\"\n              disabled={!isActive || !isPicked}\n              value={playerAction}\n            />\n            {(G.played || player.stashed) && (\n              <div className=\"played\">\n                <div className=\"label\">{(isActive && !isDiscard) ? `${opponent.name} played` : 'You played'}</div>\n                <Card card={G.played || player.stashed} />\n              </div>\n            )}\n          </div>\n          <div className=\"history\">\n            <div className=\"trump\">\n              <span className=\"label\">Trump</span>\n              {previousTrump && (\n                <Card card={previousTrump} compact isOld />\n              )}\n              <Card card={trump} compact />\n            </div>\n            {lastTrick && (\n              <div className=\"last-trick\">\n                <span className=\"label\">Last</span>\n                <Card\n                  card={lastTrick.cards[0]}\n                  compact\n                  won={lastTrick.winner === lastTrick.cards[0].playerID}\n                />\n                <Card\n                  card={lastTrick.cards[1]}\n                  compact\n                  won={lastTrick.winner === lastTrick.cards[1].playerID}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        <ol className=\"hand\">\n          {hand.map(({ card, i }) =>\n            <li key={`${card.rank}-${card.suit}`}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  onChange={onClick(i)}\n                  disabled={!canPlay(i)}\n                  checked={chosen.includes(i)}\n                />\n                <Card card={card} isNew={isDiscard && i === hand.length - 1} />\n              </label>\n            </li>\n          )}\n        </ol>\n      </div>\n      <HelpText card={firstPickedCard} key={`${firstPickedCard?.suit}-${firstPickedCard?.rank}`} />\n    </form>\n  );\n}\n"],"sourceRoot":""}