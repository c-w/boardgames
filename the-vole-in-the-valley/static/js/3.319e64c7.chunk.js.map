{"version":3,"sources":["../node_modules/boardgame.io/dist/esm/core.js","../node_modules/classnames/index.js","shared/games/fitf.js","frontend/boards/fitf/index.js"],"names":["PlayerView","STRIP_SECRETS","G","ctx","playerID","r","undefined","secret","players","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","SUITS","RANKS","dealCards","deck","random","Shuffle","map","suit","rank","flat","trumps","pop","turn","hand1","hand2","tricks","hand","stashed","getPlayers","currentPlayer","opponentID","card","calculateScore","tricksWon","t","cards","filter","c","isMoveInvalid","j","activePlayers","played","canFollowSuit","removeAt","some","highestRankInSuit","reduce","max","determineTrickWinner","winner","trumpSuit","last","opponentRank","opponentSuit","next","playCard","INVALID_MOVE","oldTrump","newHand","newCard","events","setStage","endTurn","id","score","scores","newRound","history","startingPlayer","name","minPlayers","maxPlayers","setupDataSchema","required","properties","longGame","title","type","setup","setupData","winningScore","moves","move","client","stages","discard","discardCard","endStage","endIf","playerScores","opponentScores","playerScore","sum","opponentScore","playerView","endPhase","endGame","setPhase","setActivePlayers","disableUndo","CARD_TEXTS","1","3","5","7","9","11","Card","compact","won","isNew","isOld","className","new","old","Board","matchData","useHistory","useState","chosen","setChosen","showEndOfRoundScreen","setShowEndOfRoundScreen","onClick","event","target","checked","x","canPlay","isActive","includes","isDiscard","isOver","gameover","isWinner","isEndOfRound","player","opponent","find","u","Number","tricksLost","trump","previousTrump","lastTrick","helpText","useEffect","sort","a","b","localeCompare","Stats","showHistory","hideTricks","onSubmit","preventDefault","value","disabled","onChange"],"mappings":"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","file":"static/js/3.319e64c7.chunk.js","sourcesContent":["export { v as ActivePlayers, h as INVALID_MOVE, S as Stage, T as TurnOrder } from './turn-order-7578f7f3.js';\nimport 'immer';\n\n/*\r\n * Copyright 2018 The boardgame.io Authors\r\n *\r\n * Use of this source code is governed by a MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n */\r\n/**\r\n * PlayerView reducers.\r\n */\r\nconst PlayerView = {\r\n    /**\r\n     * STRIP_SECRETS\r\n     *\r\n     * Reducer which removes a key named `secret` and\r\n     * removes all the keys in `players`, except for the one\r\n     * corresponding to the current playerID.\r\n     */\r\n    STRIP_SECRETS: (G, ctx, playerID) => {\r\n        let r = { ...G };\r\n        if (r.secret !== undefined) {\r\n            delete r.secret;\r\n        }\r\n        if (r.players) {\r\n            r.players = {\r\n                [playerID]: r.players[playerID],\r\n            };\r\n        }\r\n        return r;\r\n    },\r\n};\n\nexport { PlayerView };\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import { PlayerView, INVALID_MOVE } from 'boardgame.io/core';\nimport { last, removeAt, sum } from '../utils.js';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/packages/core').INVALID_MOVE} INVALID_MOVE **/\n\n/**\n * @typedef {{\n *  suit: string,\n *  rank: number,\n * }} Card\n *\n * @typedef {{\n *   winner: string,\n *   cards: Card[],\n * }[]} Tricks\n *\n * @typedef {{\n *   secret: {\n *     deck: Card[],\n *   },\n *   tricks: Tricks,\n *   trumps: (Card & { turn: number })[],\n *   players: {\n *     [player: string]: {\n *       hand: Card[],\n *       stashed?: Card,\n *     },\n *   },\n * }} GameState\n *\n * @typedef {{\n *   played?: Card,\n *   scores: {\n *     [player: string]: number[],\n *   },\n *   history: Tricks[],\n *   startingPlayer: string,\n *   winningScore: number,\n * }} GameContext\n *\n * @typedef {GameState & GameContext} G\n *\n * @typedef {{\n *   longGame?: boolean,\n * }} SetupData\n */\n\nconst SUITS = ['key', 'tower', 'moon'];\nconst RANKS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst LONG_GAME_WINNING_SCORE = 21;\nconst SHORT_GAME_WINNING_SCORE = 16;\nconst HAND_SIZE = 13;\nconst PLAYER_1 = '0';\nconst PLAYER_2 = '1';\n\n/**\n * @param {Ctx} ctx\n * @returns {GameState}\n */\nfunction dealCards(ctx) {\n  const deck = ctx.random.Shuffle(\n    SUITS.map(suit => RANKS.map(rank => ({ suit, rank }))).flat()\n  );\n\n  const trumps = [{ ...deck.pop(), turn: 0 }];\n\n  const hand1 = [];\n  const hand2 = [];\n\n  for (let i = 0; i < HAND_SIZE; i++) {\n    hand1.push(deck.pop());\n    hand2.push(deck.pop());\n  }\n\n  return {\n    secret: {\n      deck,\n    },\n    tricks: [],\n    trumps,\n    players: {\n      [PLAYER_1]: {\n        hand: hand1,\n        stashed: null,\n      },\n      [PLAYER_2]: {\n        hand: hand2,\n        stashed: null,\n      },\n    },\n  };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @returns {{\n *   opponentID: string,\n *   playerID: string,\n *   hand: Card[],\n *   card: Card,\n * }}\n */\nfunction getPlayers(G, ctx, i=null) {\n  const playerID = ctx.currentPlayer;\n  const opponentID = playerID === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n\n  const hand = [...G.players[playerID].hand];\n\n  const card = i == null\n    ? { ...G.players[playerID].stashed }\n    : hand[i];\n\n  return {\n    opponentID,\n    playerID,\n    hand,\n    card,\n  };\n}\n\n/**\n * @param {Tricks} tricks\n * @returns {number}\n */\nfunction calculateScore(tricks) {\n  const tricksWon = tricks.length;\n\n  let roundScore;\n\n  if (tricksWon <= 3) {\n    roundScore = 6;\n  } else if (tricksWon === 4) {\n    roundScore = 1;\n  } else if (tricksWon === 5) {\n    roundScore = 2;\n  } else if (tricksWon === 6) {\n    roundScore = 3;\n  } else if (tricksWon >= 7 && tricksWon <= 9) {\n    roundScore = 6;\n  } else {\n    roundScore = 0;\n  }\n\n  const extraScore = tricks.map(t => t.cards).flat().filter(c => c.rank === 7).length;\n\n  return roundScore + extraScore;\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @returns {{ winner: string }?}\n */\nfunction checkGameOver(G, ctx) {\n  const { playerID, opponentID } = getPlayers(G, ctx);\n\n  const playerScores = G.scores[playerID];\n  const opponentScores = G.scores[opponentID];\n\n  const playerScore = sum(playerScores);\n  const opponentScore = sum(opponentScores);\n\n  if (playerScore < G.winningScore && opponentScore < G.winningScore) {\n    return;\n  }\n\n  if (playerScore > opponentScore) {\n    return { winner: playerID };\n  }\n\n  if (opponentScore > playerScore) {\n    return { winner: opponentID };\n  }\n\n  return last(playerScores) > last(opponentScores)\n    ? { winner: playerID }\n    : { winner: opponentID };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n */\nfunction discardCard(G, ctx, i) {\n  const { playerID, hand } = getPlayers(G, ctx);\n\n  G.players[playerID].hand = removeAt(hand, i);\n\n  ctx.events.endStage();\n\n  playCard(G, ctx);\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param  {...number} cards\n * @returns {string}\n */\nexport function isMoveInvalid(G, ctx, ...cards) {\n  if (cards.length > 2) {\n    return 'played_too_many_cards';\n  }\n\n  const [i, j] = cards;\n  const { playerID, hand, card } = getPlayers(G, ctx, i);\n\n  if (i == null && G.players[playerID].stashed == null) {\n    return 'played_no_card';\n  }\n\n  if (card == null) {\n    return 'played_unknown_card';\n  }\n\n  if (ctx.activePlayers && ctx.activePlayers[playerID] === 'discard') {\n    if (j != null) {\n      return 'discarded_extra_card';\n    }\n\n    return;\n  }\n\n  if (j != null) {\n    if (card.rank !== 3) {\n      return 'played_extra_card';\n    }\n\n    if (hand[j] == null) {\n      return 'played_unknown_extra_card';\n    }\n  }\n\n  if (G.played != null) {\n    const canFollowSuit = removeAt(hand, i).some(c => c.suit === G.played.suit);\n\n    if (card.suit !== G.played.suit && canFollowSuit) {\n      return 'must_follow_suit';\n    }\n\n    const highestRankInSuit = hand\n      .filter(c => c.suit === G.played.suit)\n      .map(c => c.rank)\n      .reduce((max, rank) => max < rank ? rank : max, -1);\n\n    if (G.played.rank === 11 && card.rank !== 1 && card.rank !== highestRankInSuit && highestRankInSuit !== -1) {\n      return 'must_follow_11';\n    }\n  }\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number} i\n * @returns {{ winner: string, next: string }}\n */\nfunction determineTrickWinner(G, ctx, i) {\n  const { playerID, opponentID, card } = getPlayers(G, ctx, i);\n\n  const trumpSuit = last(G.trumps).suit;\n\n  let { rank, suit } = card;\n  let opponentRank = G.played.rank;\n  let opponentSuit = G.played.suit;\n\n  if ((rank === 9 || opponentRank === 9) && !(rank === 9 && opponentRank === 9)) {\n    if (rank === 9) {\n      suit = trumpSuit;\n    } else if (opponentRank === 9) {\n      opponentSuit = trumpSuit;\n    }\n  }\n\n  let winner;\n\n  if (suit === trumpSuit && opponentSuit !== trumpSuit) {\n    winner = playerID;\n  } else if (suit !== trumpSuit && opponentSuit === trumpSuit) {\n    winner = opponentID;\n  } else if (suit !== opponentSuit) {\n    winner = opponentID;\n  } else {\n    winner = rank > opponentRank ? playerID : opponentID;\n  }\n\n  let next;\n\n  if (opponentRank === 1 && winner !== opponentID) {\n    next = opponentID;\n  } else if (rank === 1 && winner !== playerID) {\n    next = playerID;\n  } else {\n    next = winner;\n  }\n\n  return { winner, next };\n}\n\n/**\n * @param {G} G\n * @param {Ctx} ctx\n * @param {number?} i\n * @param {number?} j\n * @returns {INVALID_MOVE?}\n */\nfunction playCard(G, ctx, i=null, j=null) {\n  if (isMoveInvalid(G, ctx, i, j)) {\n    return INVALID_MOVE;\n  }\n\n  const { playerID, opponentID, hand, card } = getPlayers(G, ctx, i);\n\n  if (card.rank === 3 && j != null) {\n    const oldTrump = { ...last(G.trumps) };\n    G.trumps.push({ ...hand[j], turn: ctx.turn });\n    hand[j] = oldTrump;\n  }\n\n  const newHand = removeAt(hand, i);\n\n  if (card.rank === 5 && G.players[playerID].stashed == null && newHand.length !== 0) {\n    const newCard = G.secret.deck.pop();\n\n    G.players[playerID].hand = [...newHand, newCard];\n    G.players[playerID].stashed = card;\n\n    ctx.events.setStage('discard');\n    return;\n  }\n\n  if (G.played == null) {\n    G.players[playerID].stashed = null;\n    G.players[playerID].hand = newHand;\n    G.played = card;\n    ctx.events.endTurn();\n    return;\n  }\n\n  let { winner, next } = determineTrickWinner(G, ctx, i);\n\n  G.tricks.push({ winner, cards: [{ ...G.played }, { ...card }] });\n  G.played = null;\n  G.players[playerID].stashed = null;\n  G.players[playerID].hand = newHand;\n\n  if (newHand.length === 0) {\n    for (const id of [playerID, opponentID]) {\n      const tricks = G.tricks.filter(t => t.winner === id);\n      const score = calculateScore(tricks);\n      G.scores[id].push(score);\n    }\n\n    const newRound = dealCards(ctx);\n    G.history.push(G.tricks);\n    G.secret = newRound.secret;\n    G.tricks = newRound.tricks;\n    G.trumps = newRound.trumps;\n    G.players = newRound.players;\n    next = G.startingPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1;\n    G.startingPlayer = next;\n  }\n\n  ctx.events.endTurn({ next });\n}\n\nexport default {\n  name: 'the-vole-in-the-valley',\n\n  minPlayers: 2,\n  maxPlayers: 2,\n\n  setupDataSchema: {\n    required: [],\n    properties: {\n      longGame: {\n        title: 'Long game',\n        type: 'boolean',\n      },\n    },\n  },\n\n  /**\n   * @param {Ctx} ctx\n   * @param {SetupData?} setupData\n   * @returns {G}\n   */\n  setup: (ctx, setupData) => ({\n    ...dealCards(ctx),\n    played: null,\n    scores: {\n      [PLAYER_1]: [],\n      [PLAYER_2]: [],\n    },\n    history: [],\n    startingPlayer: PLAYER_1,\n    winningScore: setupData?.longGame\n      ? LONG_GAME_WINNING_SCORE\n      : SHORT_GAME_WINNING_SCORE,\n  }),\n\n  moves: {\n    playCard: {\n      move: playCard,\n      client: false,\n    },\n  },\n\n  turn: {\n    stages: {\n      discard: {\n        moves: {\n          discardCard: {\n            move: discardCard,\n            client: false,\n          },\n        },\n      },\n    },\n  },\n\n  endIf: checkGameOver,\n\n  playerView: PlayerView.STRIP_SECRETS,\n\n  events: {\n    endStage: false,\n    endTurn: false,\n    endPhase: false,\n    endGame: false,\n    setStage: false,\n    setPhase: false,\n    setActivePlayers: false,\n  },\n\n  disableUndo: true,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { isMoveInvalid } from '../../../shared/games/fitf';\nimport { last, sum } from '../../../shared/utils';\nimport './index.scss';\n\n/** @typedef {import('boardgame.io/dist/types/src/types').Ctx} Ctx **/\n/** @typedef {import('boardgame.io/dist/types/src/types').LobbyAPI.Match} Match **/\n/** @typedef {import('../../../shared/games/fitf').Card} Card */\n/** @typedef {import('../../../shared/games/fitf').G} G */\n\nconst CARD_TEXTS = {\n  1: 'If you play this and lose the trick, you lead the next trick.',\n  3: 'When you play this, you may exchange the trump card with a card from your hand.',\n  5: 'When you play this, draw 1 card. Then discard any 1 card to the bottom of the deck (face down).',\n  7: 'The winner of the trick receives 1 point for each 7 in the trick.',\n  9: 'When determining the winner of a trick with only one 9, treat the 9 as if it were in the trump suit.',\n  11: 'When you lead this, if your opponent has a card of this suit, they must play either the 1 of this suit or their highest ranked card of this suit.',\n};\n\n/**\n * @param {object} props\n * @param {Card} props.card\n * @param {boolean=} props.compact\n * @param {boolean=} props.won\n * @param {boolean=} props.isNew\n * @param {boolean=} props.isOld\n */\nfunction Card({ card, compact, won, isNew, isOld }) {\n  return (\n    <span className={classNames('card', card.suit, { won, new: isNew, old: isOld })}>\n      <span className={classNames('content', { compact })}>\n        <span className=\"rank\">{card.rank}</span>\n        <span className=\"suit\">{card.suit}</span>\n      </span>\n    </span>\n  );\n}\n\n/**\n * @param {object} props\n * @param {G} props.G\n * @param {Ctx} props.ctx\n * @param {string} props.playerID\n * @param {any} props.moves\n * @param {Match['players']} props.matchData\n */\nexport default function Board({ G, ctx, playerID, moves, matchData }) {\n  const history = useHistory();\n  const [chosen, setChosen] = useState([]);\n  const [showEndOfRoundScreen, setShowEndOfRoundScreen] = useState(false);\n\n  const playCard = (event) => {\n    event.preventDefault();\n    moves.playCard(...chosen);\n    setChosen([]);\n  };\n\n  const discardCard = (event) => {\n    event.preventDefault();\n    moves.discardCard(...chosen);\n    setChosen([]);\n  };\n\n  const onClick = (i) => (event) => {\n    if (event.target.checked) {\n      setChosen([...chosen, i]);\n    } else {\n      setChosen(chosen.filter(x => x !== i));\n    }\n  };\n\n  const canPlay = (i) => {\n    if (!isActive) {\n      return false;\n    }\n\n    if (chosen.includes(i)) {\n      return true;\n    }\n\n    if (isDiscard) {\n      return chosen.length === 0;\n    }\n\n    if (isMoveInvalid(G, ctx, ...chosen, i)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const goToNextRound = (event) => {\n    event.preventDefault();\n    setShowEndOfRoundScreen(false);\n  };\n\n  const goToNewGame = (event) => {\n    event.preventDefault();\n    history.push('/new');\n  };\n\n  const isOver = ctx.gameover != null;\n  const isWinner = isOver && ctx.gameover.winner === playerID;\n  const isActive = playerID === ctx.currentPlayer;\n  const isDiscard = ctx.activePlayers && ctx.activePlayers[playerID] === 'discard';\n  const isEndOfRound = G.tricks.length === 0 && G.history.length > 0;\n  const player = G.players[playerID];\n  const opponent = matchData.find(u => u.id !== Number(playerID));\n  const tricksWon = G.tricks.filter(t => t.winner === playerID).length;\n  const tricksLost = G.tricks.filter(t => t.winner !== playerID).length;\n  const trump = last(G.trumps);\n  const previousTrump = trump.turn > 0 && ctx.turn - trump.turn <= 1 ? G.trumps[G.trumps.length - 2] : null;\n  const lastTrick = isEndOfRound && showEndOfRoundScreen ? last(last(G.history)) : G.tricks.length >= 1 ? last(G.tricks) : null;\n  const helpText = chosen.length > 0 ? CARD_TEXTS[player.hand[chosen[0]].rank] : null;\n\n  useEffect(() => {\n    if (isEndOfRound) {\n      setShowEndOfRoundScreen(true);\n    }\n  }, [setShowEndOfRoundScreen, isEndOfRound]);\n\n  const hand = player.hand.map((card, i) => ({ card, i })).sort((a, b) => {\n    return a.card.suit === b.card.suit\n      ? a.card.rank - b.card.rank\n      : a.card.suit.localeCompare(b.card.suit);\n  });\n\n  const Stats = ({ showHistory=false, hideTricks=false }) => (\n    <div className=\"stats\">\n      <div className=\"score\">\n        <span className=\"label\">Your score</span>\n        <span>{sum(G.scores[playerID])}</span>\n        {showHistory && (\n          <span>\n            (+ {last(G.scores[playerID])})\n          </span>\n        )}\n      </div>\n      <div className=\"score\">\n        <span className=\"label\">{opponent.name} score</span>\n        <span>{sum(G.scores[opponent.id])}</span>\n        {showHistory && (\n          <span>\n            (+ {last(G.scores[opponent.id])})\n          </span>\n        )}\n      </div>\n      {!hideTricks && (\n        <div className=\"tricks\">\n          <span className=\"label\">Your tricks</span>\n          <span>{tricksWon}</span>\n        </div>\n      )}\n      {!hideTricks && (\n        <div className=\"tricks\">\n          <span className=\"label\">{opponent.name} tricks</span>\n          <span>{tricksLost}</span>\n        </div>\n      )}\n    </div>\n  );\n\n  if (isOver) {\n    return (\n      <form onSubmit={goToNewGame}>\n        <Stats showHistory hideTricks />\n        <div>\n          <em>{isWinner ? 'You won!' : 'You lost.'}</em>\n        </div>\n        <input\n          type=\"submit\"\n          value=\"Click to play another game\"\n        />\n      </form>\n    );\n  }\n\n  if (showEndOfRoundScreen) {\n    return (\n      <form onSubmit={goToNextRound}>\n        <Stats showHistory hideTricks />\n        <input\n          type=\"submit\"\n          value=\"Ok, proceed to next round\"\n        />\n      </form>\n    );\n  }\n\n  return (\n    <form onSubmit={isDiscard ? discardCard : playCard} className={classNames({ disabled: !isActive })}>\n      <div className=\"board\">\n        <div className=\"info\">\n          <Stats />\n          <div className=\"current-trick\">\n            <em>{isActive ? 'Your move!' : `Waiting for ${opponent.name}...`}</em>\n            {G.played && (\n              <div className=\"played\">\n                <div className=\"label\">{isActive ? `${opponent.name} played` : 'You played'}</div>\n                <Card card={G.played} />\n              </div>\n            )}\n          </div>\n          <div className=\"history\">\n            <div className=\"trump\">\n              <span className=\"label\">Trump</span>\n              {previousTrump && (\n                <Card card={previousTrump} compact isOld />\n              )}\n              <Card card={trump} compact />\n            </div>\n            {lastTrick && (\n              <div className=\"last-trick\">\n                <span className=\"label\">Last</span>\n                <Card\n                  card={lastTrick.cards[0]}\n                  compact\n                  won={lastTrick.winner === '0'}\n                />\n                <Card\n                  card={lastTrick.cards[1]}\n                  compact\n                  won={lastTrick.winner === '1'}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        <ol className=\"hand\">\n          {hand.map(({ card, i }) =>\n            <li key={`${card.rank}-${card.suit}`}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  onChange={onClick(i)}\n                  disabled={!canPlay(i)}\n                  checked={chosen.includes(i)}\n                />\n                <Card card={card} isNew={isDiscard && i === hand.length - 1} />\n              </label>\n            </li>\n          )}\n        </ol>\n      </div>\n      <input\n        type=\"submit\"\n        disabled={!isActive || chosen.length === 0}\n        value={isDiscard ? 'Discard card' : 'Play card'}\n      />\n      {helpText && (\n        <aside>\n          {helpText}\n        </aside>\n      )}\n    </form>\n  );\n}\n"],"sourceRoot":""}